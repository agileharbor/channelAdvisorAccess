<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Netco</name>
    </assembly>
    <members>
        <member name="T:Netco.Lib.SchrodingOr`2">
            <summary>
            Holds a pair of values, returning specific value depending on the outcome of the supplied generator.
            </summary>
            <typeparam name="TDead">The type of the dead.</typeparam>
            <typeparam name="TAlive">The type of the alive.</typeparam>
            <see href="http://weblogs.asp.net/leftslipper/archive/2009/04/01/the-string-or-the-cat-a-new-net-framework-library.aspx"/>
        </member>
        <member name="M:Netco.Lib.SchrodingOr`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Lib.SchrodingOr`2"/> class.
            </summary>
            <param name="dead">The dead instance.</param>
            <param name="alive">The alive instance.</param>
        </member>
        <member name="M:Netco.Lib.SchrodingOr`2.#ctor(`0,`1,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Lib.SchrodingOr`2"/> class.
            </summary>
            <param name="dead">The dead.</param>
            <param name="alive">The alive.</param>
            <param name="heisenbergGenerator">The heisenberg generator used to determine whether current instance is alive or dead.</param>
        </member>
        <member name="M:Netco.Lib.SchrodingOr`2.EnsureStateValid(System.Boolean)">
            <summary>
            Ensures the state valid.
            </summary>
            <param name="alive">Expected state.</param>
            <exception cref="T:Netco.Lib.Exceptions.HeisenbergException">Expected state doesn't match current state..</exception>
        </member>
        <member name="P:Netco.Lib.SchrodingOr`2.Alive">
            <summary>
            Gets or sets the alive instance.
            </summary>
            <value>The alive instance.</value>
        </member>
        <member name="P:Netco.Lib.SchrodingOr`2.Dead">
            <summary>
            Gets or sets the dead instance.
            </summary>
            <value>The dead instance.</value>
        </member>
        <member name="T:Netco.ActionPolicyServices.ActionPolicyWithState">
            <summary>
            Same as <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/>, but indicates that this policy
            holds some state and thus must have syncronized access.
            </summary>
        </member>
        <member name="T:Netco.ActionPolicyServices.ActionPolicy">
            <summary>
            Policy that could be applied to delegates to
            augment their behavior (i.e. to retry on problems)
            </summary>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.#ctor(System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/> class.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.Do(System.Action)">
            <summary>
            Performs the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.Get``1(System.Func{``0})">
            <summary>
            Performs the specified action within the policy and returns the result
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to perform.</param>
            <returns>result returned by <paramref name="action"/></returns>
        </member>
        <member name="F:Netco.ActionPolicyServices.ActionPolicy.Null">
            <summary>
            Action policy that does not do anything
            </summary>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.With(Netco.ActionPolicyServices.ExceptionHandler)">
            <summary> Starts building <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/> 
            that can handle exceptions, as determined by 
            <paramref name="handler"/> </summary>
            <param name="handler">The exception handler.</param>
            <returns>syntax</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.From(System.Func{System.Exception,System.Boolean})">
            <summary> Starts building <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/> 
            that can handle exceptions, as determined by 
            <paramref name="doWeHandle"/> function</summary>
            <param name="doWeHandle"> function that returns <em>true</em> if we can hande the specified exception.</param>
            <returns>syntax</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.Handle``1">
            <summary> Starts building simple <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/>
            that can handle <typeparamref name="TException"/> </summary>
            <typeparam name="TException">The type of the exception to handle.</typeparam>
            <returns>syntax</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.Handle``2">
            <summary> Starts building simple <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/>
            that can handle <typeparamref name="TEx1"/> or <typeparamref name="TEx1"/>
            </summary>
            <typeparam name="TEx1">The type of the exception to handle.</typeparam>
            <typeparam name="TEx2">The type of the exception to handle.</typeparam>
            <returns>syntax</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicy.Handle``3">
            <summary> Starts building simple <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/>
            that can handle <typeparamref name="TEx1"/> or <typeparamref name="TEx1"/>
            </summary>
            <typeparam name="TEx1">The first type of the exception to handle.</typeparam>
            <typeparam name="TEx2">The second of the exception to handle.</typeparam>
            <typeparam name="TEx3">The third of the exception to handle.</typeparam>
            <returns>syntax</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ActionPolicyWithState.#ctor(System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.ActionPolicyServices.ActionPolicyWithState"/> class.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="T:Netco.UserInteraction.Notification">
            <summary>
            Provides a common way to notify the user.
            </summary>
            <remarks>Makes it easy to initialize notification service once and reuse it
            everywhere in the program.</remarks>
        </member>
        <member name="M:Netco.UserInteraction.Notification.Notify(System.String,System.String)">
            <summary>
            Notifies the user.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Notification.Notify(Netco.UserInteraction.Message)">
            <summary>
            Notifies the user.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Notification.NotifyAboutError(System.String,System.String)">
            <summary>
            Notifies user about an error.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Netco.UserInteraction.Notification.NotificationService">
            <summary>
            Gets or sets the user notification service.
            </summary>
            <value>The user notification service.</value>
            <remarks>Use this to initialize how program notifies the user.</remarks>
        </member>
        <member name="T:Netco.Monads.Walk">
            <summary>
            Simplifies acessing a chain of properties when one of the property can be null. Instead of exception thrown <c>null</c> is still returned.
            </summary>
            <example>
            string code = licensePlate.MaybeDeep( lp => lp.Car.Owner.Address.PostCode );
            </example>
            <remarks>There's an overhead associated with dynamic unwrapping of accessing members into expressions.
            Avoid this for high performance sections.</remarks>
            <seealso href = "http://maybe.codeplex.com" />
            <seealso href = "http://blogs.msdn.com/alexj/archive/2008/03/03/maybe-there-is-more.aspx" />
            <seealso href = "http://blogs.developpeur.org/miiitch/archive/2008/02/29/vendredi-c-est-expression-tree.aspx" />
        </member>
        <member name="M:Netco.Monads.Walk.IsNullable(System.Type)">
            <summary>
            Check the type to see if it's Nullable.
            </summary>
            <param name = "theType">Type to check.</param>
            <returns><c>true</c> if type is Nullable, <c>false</c> otherwise.</returns>
            <see href="http://davidhayden.com/blog/dave/archive/2006/11/26/IsTypeNullableTypeConverter.aspx"/>
        </member>
        <member name="F:Netco.Monads.Walk._maybeNullableMethod">
            <summary>
            	For types that return a nullable
            </summary>
        </member>
        <member name="M:Netco.Monads.Walk.MaybeShallowNullable``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Wraps properties access that results in a nullable types
            </summary>
            <typeparam name = "TSource">Source type.</typeparam>
            <typeparam name = "TResult">Nullable result type</typeparam>
            <param name = "source">Source data.</param>
            <param name = "expression">Expression to access properties.</param>
            <returns>Nullable result experession.</returns>
        </member>
        <member name="M:Netco.Monads.Walk.MaybeShallowPrimitive``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Wrapes properties shallow access for expression that returns nullable type.
            </summary>
            <typeparam name = "TSource">Source type.</typeparam>
            <typeparam name = "TResult">Nullable result type.</typeparam>
            <param name = "source">Source data.</param>
            <param name = "expression">Shallow {source.Property} access expression.</param>
            <returns>Result in nullable type.</returns>
        </member>
        <member name="M:Netco.Monads.Walk.MaybeDeepToNullable``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2})">
            <summary>
            Wraps deep access to <paramref name="source"/> properties.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TCurry">The type of the curry.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="expression">The expression.</param>
            <param name="finalAccessor">The final accessor.</param>
            <returns>Results of using <paramref name="finalAccessor"/> acting on result of <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Netco.Monads.Walk.MaybeDeep``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            	Goes as deep as the expression so x.MaybeDeep&lt;Z,X>( x=>x.y.z)
            </summary>
            <typeparam name = "TSource"></typeparam>
            <typeparam name = "TResult"></typeparam>
            <param name = "t"></param>
            <param name = "ex"></param>
            <returns></returns>
            <seealso href="http://blogs.developpeur.org/miiitch/archive/2008/02/29/vendredi-c-est-expression-tree.aspx"/>
        </member>
        <member name="M:Netco.Monads.Walk.MaybeShallow``2(``0,System.Func{``0,``1})">
            <summary>
            	Only goes one level in so x.MaybeShawllow(x=>x.y)
            </summary>
            <typeparam name = "T"></typeparam>
            <typeparam name = "TV"></typeparam>
            <param name = "t"></param>
            <param name = "selector"></param>
            <returns></returns>
        </member>
        <member name="M:Netco.Monads.Walk.ConvertMemberToMethodCall(System.Linq.Expressions.MemberExpression)">
            <summary>
            	This method converts a call from a member in method call. Basically:
            	'. MaProp' becomes '. Maybe (p => p.MaProp)'
            </summary>
            <param name = "memberExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Netco.MediatorLib.WeakAction">
            <summary>
            This class is an implementation detail of the MessageToActionsMap class.
            </summary>
        </member>
        <member name="M:Netco.MediatorLib.WeakAction.#ctor(System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Constructs a WeakAction.
            </summary>
            <param name="target">The instance to be stored as a weak reference.</param>
            <param name="method">The Method Info to create the action for.</param>
            <param name="parameterType">The type of parameter to be passed in the action. Pass null if there is not a parameter.</param>
        </member>
        <member name="M:Netco.MediatorLib.WeakAction.CreateAction">
            <summary>
            Creates a "throw away" delegate to invoke the method on the target
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netco.MediatorLib.WeakAction.IsAlive">
            <summary>
            returns true if the target is still in memory
            </summary>
        </member>
        <member name="T:Netco.Monads.Result`2">
            <summary>
            Improved version of the Result[T], that could serve as a basis for it.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TError">The type of the error.</typeparam>
            <remarks>It is to be moved up-stream if found useful in other projects.</remarks>
        </member>
        <member name="M:Netco.Monads.Result`2.CreateSuccess(`0)">
            <summary>
            Creates the success result.
            </summary>
            <param name="value">The value.</param>
            <returns>result encapsulating the success value</returns>
            <exception cref="T:System.ArgumentNullException">if value is a null reference type</exception>
        </member>
        <member name="M:Netco.Monads.Result`2.CreateError(`1)">
            <summary>
            Creates the error result.
            </summary>
            <param name="error">The error.</param>
            <returns>result encapsulating the error value</returns>
            <exception cref="T:System.ArgumentNullException">if error is a null reference type</exception>
        </member>
        <member name="M:Netco.Monads.Result`2.op_Implicit(`0)~Netco.Monads.Result{`0,`1}">
            <summary>
            Performs an implicit conversion from <typeparamref name="TValue"/> to <see cref="T:Netco.Monads.Result`2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">If value is a null reference type</exception>
        </member>
        <member name="M:Netco.Monads.Result`2.op_Implicit(`1)~Netco.Monads.Result{`0,`1}">
            <summary>
            Performs an implicit conversion from <typeparamref name="TError"/> to <see cref="T:Netco.Monads.Result`2"/>.
            </summary>
            <param name="error">The error.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">If value is a null reference type</exception>
        </member>
        <member name="M:Netco.Monads.Result`2.Equals(Netco.Monads.Result{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Netco.Monads.Result`2.Apply(System.Action{`0})">
            <summary>
            Applies the specified <paramref name="action"/>
            to this <see cref="T:Netco.Monads.Result`1"/>, if it has value.
            </summary>
            <param name="action">The action to apply.</param>
            <returns>returns same instance for inlining</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="action"/> is null</exception>
        </member>
        <member name="M:Netco.Monads.Result`2.Handle(System.Action{`1})">
            <summary>
            Handles the specified handler.
            </summary>
            <param name="handler">The handler.</param>
            <returns>same instance for the inlining</returns>
        </member>
        <member name="M:Netco.Monads.Result`2.Convert``1(System.Func{`0,``0})">
            <summary>
            Converts value of this instance
            using the provided <paramref name="converter"/>
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The converter.</param>
            <returns>Converted result</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="converter"/> is null</exception>
        </member>
        <member name="M:Netco.Monads.Result`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Netco.Monads.Result`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Netco.Monads.Result`2.Combine``1(System.Func{`0,Netco.Monads.Result{``0,`1}})">
            <summary>
            Combines this <see cref="T:Netco.Monads.Result`1"/> with the result returned
            by <paramref name="converter"/>.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The converter.</param>
            <returns>Combined result.</returns>
        </member>
        <member name="M:Netco.Monads.Result`2.ToMaybe``1(System.Func{`0,``0})">
            <summary>
            Converts this <see cref="T:Netco.Monads.Result`1"/> to <see cref="T:Netco.Monads.Maybe`1"/>, 
            using the <paramref name="converter"/> to perform the value conversion.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The reflector.</param>
            <returns><see cref="T:Netco.Monads.Maybe`1"/> that represents the original value behind the <see cref="T:Netco.Monads.Result`1"/> after the conversion</returns>
        </member>
        <member name="M:Netco.Monads.Result`2.ToMaybe">
            <summary>
            Converts this <see cref="T:Netco.Monads.Result`1"/> to <see cref="T:Netco.Monads.Maybe`1"/>, 
            with the original value reference, if there is any.
            </summary>
            <returns><see cref="T:Netco.Monads.Maybe`1"/> that represents the original value behind the <see cref="T:Netco.Monads.Result`1"/>.</returns>
        </member>
        <member name="M:Netco.Monads.Result`2.ExposeException(System.Func{`1,System.Exception})">
            <summary>
            Exposes result failure as the exception (providing compatibility, with the exception -expecting code).
            </summary>
            <param name="exception">The function to generate exception, provided the error string.</param>
            <returns>result value</returns>
        </member>
        <member name="M:Netco.Monads.Result`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Netco.Monads.Result`2.Value">
            <summary>
            item associated with this result
            </summary>
        </member>
        <member name="P:Netco.Monads.Result`2.Error">
            <summary>
            Error message associated with this failure
            </summary>
        </member>
        <member name="P:Netco.Monads.Result`2.IsSuccess">
            <summary>
            Gets a value indicating whether this result is valid.
            </summary>
            <value><c>true</c> if this result is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Netco.Lib.Exceptions.HeisenbergException">
            <summary>
            Thrown if requested state doesn't match current state.
            </summary>
            <see href="http://weblogs.asp.net/leftslipper/archive/2009/04/01/the-string-or-the-cat-a-new-net-framework-library.aspx"/>
        </member>
        <member name="M:Netco.Lib.Exceptions.HeisenbergException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Lib.Exceptions.HeisenbergException"/> class.
            </summary>
        </member>
        <member name="T:Netco.Extensions.TimeSpanExtensions">
            <summary>
            Extension methods for <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Netco.Extensions.TimeSpanExtensions.ToTimeSpan(System.String)">
            <summary>
            Converts <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="s">The s.</param>
            <returns><see cref="T:System.TimeSpan"/> created from the supplied string.</returns>
            <remarks>Converts "1.5h", "30m", or "1" (default hour) to <see cref="T:System.TimeSpan"/>.</remarks>
        </member>
        <member name="M:Netco.Extensions.TimeSpanExtensions.ToStringFormat(System.TimeSpan)">
            <summary>
            Converts <see cref="T:System.TimeSpan"/> to string.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>String representing time span.</returns>
        </member>
        <member name="M:Netco.Extensions.TimeSpanExtensions.ToStringFormat(System.TimeSpan,System.String)">
            <summary>
            Converts <see cref="T:System.TimeSpan"/> to string.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="format">The <see cref="M:System.DateTime.ToString(System.String)"/> format.</param>
            <returns>Formatted <see cref="T:System.TimeSpan"/> string.</returns>
            <remarks>If <paramref name="format"/> is <c>null</c> or empty default formatting is used.
            <para>With default formatting if time span is less than an hour, total minutes are shown followed by "m" (<b>15m</b>).
            Otherwise total hours are shown followed by "h" (<b>1.5h</b>).</para></remarks>
        </member>
        <member name="T:Netco.Extensions.DateTimeExtensions">
            <summary>
            Provides helper methods for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Netco.Extensions.DateTimeExtensions.ToPresetLocal(System.DateTime)">
            <summary>
            Converts <see cref="T:System.DateTime"/> to local time zone.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>Local <see cref="T:System.DateTime"/>.</returns>
            <remarks>Relies on <see cref="P:Netco.Extensions.DateTimeExtensions.LocalTimeZone"/> for conversion.</remarks>
        </member>
        <member name="M:Netco.Extensions.DateTimeExtensions.SetLocalTimeZone(Netco.Extensions.DateTimeExtensions.CommonTimeZone)">
            <summary>
            Sets the local time zone.
            </summary>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="P:Netco.Extensions.DateTimeExtensions.LocalTimeZone">
            <summary>
            Gets or sets the local time zone used by <see cref="M:Netco.Extensions.DateTimeExtensions.ToPresetLocal(System.DateTime)"/>.
            </summary>
            <value>The local time zone.</value>
        </member>
        <member name="T:Netco.Extensions.DateTimeExtensions.CommonTimeZone">
            <summary>
            Commonly supported time zones.
            </summary>
            <seealso href="http://www.timeanddate.com/library/abbreviations/timezones/na/"/>
        </member>
        <member name="F:Netco.Extensions.DateTimeExtensions.CommonTimeZone.PST">
            <summary>
            Pacific Standard Time
            </summary>
            <remarks>UTC - 8 hours, EST - 3 hours</remarks>
        </member>
        <member name="F:Netco.Extensions.DateTimeExtensions.CommonTimeZone.MST">
            <summary>
            Mountain Standard Time
            </summary>
            <remarks>UTC - 7 hours, EST - 2 hours, PST + 1 hour</remarks>
        </member>
        <member name="F:Netco.Extensions.DateTimeExtensions.CommonTimeZone.CST">
            <summary>
            Central Standard Time
            </summary>
            <remarks>UTC - 6 hours, EST - 1 hour, PST + 2 hours</remarks>
        </member>
        <member name="F:Netco.Extensions.DateTimeExtensions.CommonTimeZone.EST">
            <summary>
            Eastern Standard Time
            </summary>
            <remarks>UTC - 5 hours, PST + 3 hours</remarks>
        </member>
        <member name="T:Netco.Utils.EnumComparer`1">
            <summary>
            A fast and efficient implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for Enum types.
            Useful for dictionaries that use Enums as their keys. 
            </summary>
            <remarks>
            http://www.codeproject.com/KB/cs/EnumComparer.aspx
            </remarks>
            <example>
            <code>
            var dict = new Dictionary&lt;DayOfWeek, string&gt;(EnumComparer&lt;DayOfWeek&gt;.Instance);
            </code>
            </example>
            <typeparam name="TEnum">The type of the Enum.</typeparam>
        </member>
        <member name="F:Netco.Utils.EnumComparer`1.Instance">
            <summary>
            The singleton accessor.
            </summary>
        </member>
        <member name="M:Netco.Utils.EnumComparer`1.#cctor">
            <summary>
            Initializes the <see cref="T:Netco.Utils.EnumComparer`1"/> class
            by generating the GetHashCode and Equals methods.
            </summary>
        </member>
        <member name="M:Netco.Utils.EnumComparer`1.#ctor">
            <summary>
            A private constructor to prevent user instantiation.
            </summary>
        </member>
        <member name="M:Netco.Utils.EnumComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="TEnum"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="TEnum"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Netco.Utils.EnumComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
            </exception>
        </member>
        <member name="M:Netco.Utils.EnumComparer`1.GenerateEquals">
            <summary>
            Generates a comparison method similiar to this:
            <code>
            bool Equals(TEnum x, TEnum y)
            {
                return x == y;
            }
            </code>
            </summary>
            <returns>The generated method.</returns>
        </member>
        <member name="M:Netco.Utils.EnumComparer`1.GenerateGetHashCode">
            <summary>
            Generates a GetHashCode method similar to this:
            <code>
            int GetHashCode(TEnum obj)
            {
                return ((int)obj).GetHashCode();
            }
            </code>
            </summary>
            <returns>The generated method.</returns>
        </member>
        <member name="T:Netco.UserInteraction.IUserNotification">
            <summary>
            Sends user notifications.
            </summary>
        </member>
        <member name="M:Netco.UserInteraction.IUserNotification.Notify(System.String,System.String)">
            <summary>
            Notifies the user.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <remarks>Essentially sends user simple messages. Useful to inform
            user about application progress.
            <para>It's up to the implementation to wait for the user to acknowledge
            notification or not.</para></remarks>
        </member>
        <member name="M:Netco.UserInteraction.IUserNotification.Notify(Netco.UserInteraction.Message)">
            <summary>
            Notifies the specified user using supplied message.
            </summary>
            <param name="message">The message to show to the user.</param>
        </member>
        <member name="M:Netco.UserInteraction.IUserNotification.NotifyAboutError(System.String,System.String)">
            <summary>
            Notifies user about an error.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <remarks>Implementation can show some kind of special message to the user.</remarks>
        </member>
        <member name="M:Netco.UserInteraction.IUserNotification.NotifyAboutError(Netco.UserInteraction.Message)">
            <summary>
            Notifies the user about an error using supplied message.
            </summary>
            <param name="message">The message to show to the user.</param>
        </member>
        <member name="T:Netco.UserInteraction.Impl.FormsInteraction">
            <summary>
            Class to notify user.
            </summary>
        </member>
        <member name="T:Netco.UserInteraction.IUserInteraction">
            <summary>
            Interacts with user, possibly getting back simple user replies.
            </summary>
        </member>
        <member name="M:Netco.UserInteraction.IUserInteraction.Ask(System.String,System.String)">
            <summary>
            Asks user a question.
            </summary>
            <param name="title">The question title.</param>
            <param name="question">The question.</param>
            <returns><c>true</c> if user agreed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Netco.UserInteraction.IUserInteraction.Ask(Netco.UserInteraction.Message)">
            <summary>
            Asks user a question.
            </summary>
            <param name="question">The question.</param>
            <returns><c>true</c> if user agreed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.Notify(System.String,System.String)">
            <summary>
            Notifies the user with the specified message.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.Notify(Netco.UserInteraction.Message)">
            <summary>
            Notifies the specified user using supplied message.
            </summary>
            <param name="message">The message to show to the user.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.ShowMessage(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Shows the message with the specified icon.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <param name="messageIcon">The message icon.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.NotifyAboutError(System.String,System.String)">
            <summary>
            Notifies user about an error.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.NotifyAboutError(Netco.UserInteraction.Message)">
            <summary>
            Notifies the user about an error using supplied message.
            </summary>
            <param name="message">The message to show to the user.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.ShowError(System.String,System.String)">
            <summary>
            Notifies user about an error.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.Ask(System.String,System.String)">
            <summary>
            Asks user a question.
            </summary>
            <param name="title">The question title.</param>
            <param name="question">The question.</param>
            <returns><c>true</c> if user agreed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.Ask(Netco.UserInteraction.Message)">
            <summary>
            Asks user a question.
            </summary>
            <param name="question">The question.</param>
            <returns>
            	<c>true</c> if user agreed; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.ShowQuestion(System.String,System.String)">
            <summary>
            Asks user a question.
            </summary>
            <param name="title">The question title.</param>
            <param name="question">The question.</param>
            <returns><c>true</c> if user agreed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Netco.UserInteraction.Impl.FormsInteraction.ShowQuestion(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Asks the specified question.
            </summary>
            <param name="title">The title.</param>
            <param name="question">The question.</param>
            <param name="buttons">The buttons.</param>
            <returns><see cref="T:System.Windows.Forms.DialogResult"/> with user response.</returns>
            <seealso cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)"/>
        </member>
        <member name="T:Netco.Monads.Result`1">
            <summary>
            Helper class that allows to pass out method call results without using exceptions
            </summary>
            <typeparam name="T">type of the associated data</typeparam>
        </member>
        <member name="M:Netco.Monads.Result`1.CreateError(System.String,System.Object[])">
            <summary>  Creates failure result </summary>
            <param name="errorFormatString">format string for the error message</param>
            <param name="args">The arguments.</param>
            <returns>result that is a failure</returns>
            <exception cref="T:System.ArgumentNullException">if format string is null</exception>
        </member>
        <member name="M:Netco.Monads.Result`1.CreateSuccess(`0)">
            <summary>
            Creates the success result.
            </summary>
            <param name="value">The value.</param>
            <returns>result encapsulating the success value</returns>
            <exception cref="T:System.ArgumentNullException">if value is a null reference type</exception>
        </member>
        <member name="M:Netco.Monads.Result`1.Convert``1(System.Func{`0,``0})">
            <summary>
            Converts value of this instance
            using the provided <paramref name="converter"/>
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The converter.</param>
            <returns>Converted result</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="converter"/> is null</exception>
        </member>
        <member name="M:Netco.Monads.Result`1.CreateError(System.String)">
            <summary>
            Creates the error result.
            </summary>
            <param name="error">The error.</param>
            <returns>result encapsulating the error value</returns>
            <exception cref="T:System.ArgumentNullException">if error is null</exception>
        </member>
        <member name="M:Netco.Monads.Result`1.op_Implicit(`0)~Netco.Monads.Result{`0}">
            <summary>
            Performs an implicit conversion from <typeparamref name="T"/> to <see cref="T:Netco.Monads.Result`1"/>.
            </summary>
            <param name="value">The item.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="value"/> is a reference type that is null</exception>
        </member>
        <member name="M:Netco.Monads.Result`1.Combine``1(System.Func{`0,Netco.Monads.Result{``0}})">
            <summary>
            Combines this <see cref="T:Netco.Monads.Result`1"/> with the result returned
            by <paramref name="converter"/>.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The converter.</param>
            <returns>Combined result.</returns>
        </member>
        <member name="M:Netco.Monads.Result`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Netco.Monads.Result`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Netco.Monads.Result`1.Equals(Netco.Monads.Result{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Netco.Monads.Result`1.Apply(System.Action{`0})">
            <summary>
            Applies the specified <paramref name="action"/>
            to this <see cref="T:Netco.Monads.Result`1"/>, if it has value.
            </summary>
            <param name="action">The action to apply.</param>
            <returns>returns same instance for inlining</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="action"/> is null</exception>
        </member>
        <member name="M:Netco.Monads.Result`1.Handle(System.Action{System.String})">
            <summary>
            Handles the specified handler.
            </summary>
            <param name="handler">The handler.</param>
            <returns>same instance for the inlining</returns>
        </member>
        <member name="M:Netco.Monads.Result`1.ToMaybe``1(System.Func{`0,``0})">
            <summary>
            Converts this <see cref="T:Netco.Monads.Result`1"/> to <see cref="T:Netco.Monads.Maybe`1"/>, 
            using the <paramref name="converter"/> to perform the value conversion.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The reflector.</param>
            <returns><see cref="T:Netco.Monads.Maybe`1"/> that represents the original value behind the <see cref="T:Netco.Monads.Result`1"/> after the conversion</returns>
        </member>
        <member name="M:Netco.Monads.Result`1.ToMaybe">
            <summary>
            Converts this <see cref="T:Netco.Monads.Result`1"/> to <see cref="T:Netco.Monads.Maybe`1"/>, 
            with the original value reference, if there is any.
            </summary>
            <returns><see cref="T:Netco.Monads.Maybe`1"/> that represents the original value behind the <see cref="T:Netco.Monads.Result`1"/>.</returns>
        </member>
        <member name="M:Netco.Monads.Result`1.ExposeException(System.Func{System.String,System.Exception})">
            <summary>
            Exposes result failure as the exception (providing compatibility, with the exception -expecting code).
            </summary>
            <param name="exception">The function to generate exception, provided the error string.</param>
            <returns>result value</returns>
        </member>
        <member name="M:Netco.Monads.Result`1.op_Implicit(System.String)~Netco.Monads.Result{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Netco.Monads.Result`1"/>.
            </summary>
            <param name="error">The error.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">If value is a null reference type</exception>
        </member>
        <member name="M:Netco.Monads.Result`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Netco.Monads.Result`1.ErrorMessage">
            <summary>
            Error message associated with this failure
            </summary>
        </member>
        <member name="P:Netco.Monads.Result`1.IsSuccess">
            <summary>
            Gets a value indicating whether this result is valid.
            </summary>
            <value><c>true</c> if this result is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Netco.Monads.Result`1.Value">
            <summary>
            item associated with this result
            </summary>
        </member>
        <member name="P:Netco.Monads.Result`1.Error">
            <summary>
            Error message associated with this failure
            </summary>
        </member>
        <member name="T:Netco.Utils.EnumUtil">
            <summary>
            Enum helper class from xLim
            </summary>
        </member>
        <member name="M:Netco.Utils.EnumUtil.Parse``1(System.String)">
            <summary>
            Parses the specified string into the <typeparamref name="TEnum"/>, ignoring the case
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <returns>Parsed enum</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null</exception>
        </member>
        <member name="M:Netco.Utils.EnumUtil.Parse``1(System.String,System.Boolean)">
            <summary>
            Parses the specified string into the <typeparamref name="TEnum"/>, ignoring the case
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>Parsed enum</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null</exception>
        </member>
        <member name="M:Netco.Utils.EnumUtil.ToIdentifier``1(``0)">
            <summary>
            Unwraps the enum by creating a string usable for identifiers and resource lookups.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="enumItem">The enum item.</param>
            <returns>a string usable for identifiers and resource lookups</returns>
        </member>
        <member name="M:Netco.Utils.EnumUtil.GetValues``1">
            <summary>
            Gets the values associated with the specified enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>array instance of the enum values</returns>
        </member>
        <member name="M:Netco.Utils.EnumUtil.GetValuesWithoutDefault``1">
            <summary>
            Gets the values associated with the specified enum, 
            with the exception of the default value
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>array instance of the enum values</returns>
        </member>
        <member name="T:Netco.Monads.Maybe`1">
            <summary>
            Helper class that indicates nullable value in a good-citizenship code
            </summary>
            <typeparam name="T">underlying type</typeparam>
        </member>
        <member name="M:Netco.Monads.Maybe`1.GetValue(System.Func{`0})">
            <summary>
            Retrieves value from this instance, using a 
            <paramref name="defaultValue"/> if it is absent.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.GetValue(`0)">
            <summary>
            Retrieves value from this instance, using a 
            <paramref name="defaultValue"/> if it is absent.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.GetValue(System.Func{Netco.Monads.Maybe{`0}})">
            <summary>
            Retrieves value from this instance, using a <paramref name="defaultValue"/>
            factory, if it is absent
            </summary>
            <param name="defaultValue">The default value to provide.</param>
            <returns>maybe value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.GetValue(Netco.Monads.Maybe{`0})">
            <summary>
            Retrieves value from this instance, using a <paramref name="defaultValue"/>
            if it is absent
            </summary>
            <param name="defaultValue">The default value to provide.</param>
            <returns>maybe value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Apply(System.Action{`0})">
            <summary>
            Applies the specified action to the value, if it is present.
            </summary>
            <param name="action">The action.</param>
            <returns>same instance for inlining</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Apply(System.Action{`0,Netco.Monads.MetaData})">
            <summary>
            Applies the specified action to the value with it's current meta data, if it is present.
            </summary>
            <param name="action">The action.</param>
            <returns>same instance for inlining</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Handle(System.Action)">
            <summary>
            Executes the specified action, if the value is absent
            </summary>
            <param name="action">The action.</param>
            <returns>same instance for inlining</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.ExposeException(System.Func{System.Exception})">
            <summary>
            Exposes the specified exception if maybe does not have value.
            </summary>
            <param name="exception">The exception.</param>
            <returns>actual value</returns>
            <exception cref="T:System.Exception">if maybe does not have value</exception>
        </member>
        <member name="M:Netco.Monads.Maybe`1.ExposeException(System.String,System.Object[])">
            <summary>
            Throws the exception if maybe does not have value.
            </summary>
            <returns>actual value</returns>
            <exception cref="T:System.InvalidOperationException">if maybe does not have value</exception>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Combine``1(System.Func{`0,Netco.Monads.Maybe{``0}})">
            <summary>
            Combines this optional with the pipeline function
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="combinator">The combinator (pipeline funcion).</param>
            <returns>optional result</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Combine``1(System.Func{`0,Netco.Monads.MetaData,Netco.Monads.Maybe{``0}})">
            <summary>
            Combines this optional with the pipeline function, providing MetaData
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="combinator">The combinator (pipeline funcion).</param>
            <returns>optional result</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Convert``1(System.Func{`0,``0})">
            <summary>
            Converts this instance to <see cref="T:Netco.Monads.Maybe`1"/>, 
            while applying <paramref name="converter"/> if there is a value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Convert``1(System.Func{`0,Netco.Monads.MetaData,``0})">
            <summary>
            Converts this instance to <see cref="T:Netco.Monads.Maybe`1"/>, 
            while applying <paramref name="converter"/> if there is a value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Convert``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Retrieves converted value, using a 
            <paramref name="defaultValue"/> if it is absent.
            </summary>
            <typeparam name="TTarget">type of the conversion target</typeparam>
            <param name="converter">The converter.</param>
            <param name="defaultValue">The default value.</param>
            <returns>value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Convert``1(System.Func{`0,Netco.Monads.MetaData,``0},System.Func{``0})">
            <summary>
            Retrieves converted value, using a 
            <paramref name="defaultValue"/> if it is absent.
            </summary>
            <typeparam name="TTarget">type of the conversion target</typeparam>
            <param name="converter">The converter.</param>
            <param name="defaultValue">The default value.</param>
            <returns>value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Convert``1(System.Func{`0,``0},``0)">
            <summary>
            Retrieves converted value, using a 
            <paramref name="defaultValue"/> if it is absent.
            </summary>
            <typeparam name="TTarget">type of the conversion target</typeparam>
            <param name="converter">The converter.</param>
            <param name="defaultValue">The default value.</param>
            <returns>value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Convert``1(System.Func{`0,Netco.Monads.MetaData,``0},``0)">
            <summary>
            Retrieves converted value, using a 
            <paramref name="defaultValue"/> if it is absent.
            </summary>
            <typeparam name="TTarget">type of the conversion target</typeparam>
            <param name="converter">The converter.</param>
            <param name="defaultValue">The default value.</param>
            <returns>value</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Equals(Netco.Monads.Maybe{`0})">
            <summary>
            Determines whether the specified <see cref="T:Netco.Monads.Maybe`1"/> is equal to the current <see cref="T:Netco.Monads.Maybe`1"/>.
            </summary>
            <param name="maybe">The <see cref="T:Netco.Monads.Maybe"/> to compare with.</param>
            <returns>true if the objects are equal</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Netco.Monads.Maybe`1.GetHashCode">
            <summary>
            Serves as a hash function for this instance.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Netco.Monads.Maybe`1"/>.
            </returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.op_Equality(Netco.Monads.Maybe{`0},Netco.Monads.Maybe{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.op_Inequality(Netco.Monads.Maybe{`0},Netco.Monads.Maybe{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.op_Implicit(`0)~Netco.Monads.Maybe{`0}">
            <summary>
            Performs an implicit conversion from <typeparamref name="T"/> to <see cref="T:Netco.Monads.Maybe`1"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.op_Explicit(Netco.Monads.Maybe{`0})~`0">
            <summary>
            Performs an explicit conversion from <see cref="T:Netco.Monads.Maybe`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.Join``1(``0)">
            <summary>
            Converts maybe into result, using the specified error as the failure
            descriptor
            </summary>
            <typeparam name="TError">The type of the failure.</typeparam>
            <param name="error">The error.</param>
            <returns>result describing current maybe</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.JoinMessage(System.String)">
            <summary>
            Converts maybe into result, using the specified error as the failure
            descriptor
            </summary>
            <returns>result describing current maybe</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.AddMeta(System.Object,System.Object)">
            <summary>
            Adds the meta data regardless if there's value or not.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Current instance for pipe calls.</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.ApplyMeta(System.Object,System.Object)">
            <summary>
            Applies the meta data if there's value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>This object for pipe calls.</returns>
        </member>
        <member name="M:Netco.Monads.Maybe`1.GetMeta``1(System.Object)">
            <summary>
            Gets the meta data.
            </summary>
            <typeparam name="TMeta">The type of the meta.</typeparam>
            <param name="metaKey">The meta key.</param>
            <returns>Meta data casted to the specified type.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Specified <paramref name="metaKey"/> key was not found</exception>
        </member>
        <member name="M:Netco.Monads.Maybe`1.TryGetMeta``1(System.Object)">
            <summary>
            Attempts to get meta data.
            </summary>
            <typeparam name="TMeta">The type of the meta.</typeparam>
            <param name="metaKey">The meta key.</param>
            <returns>Maybe with the specified meta data if meta data was found and successfully casted to the specified type.
            Otherwise empty Maybe is returned.</returns>
        </member>
        <member name="P:Netco.Monads.Maybe`1.Empty">
            <summary>
            Default empty instance.
            </summary>
            <remarks>Not static anymore to correctly support meta data for empty maybe.</remarks>
        </member>
        <member name="P:Netco.Monads.Maybe`1.Value">
            <summary>
            Gets the underlying value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Netco.Monads.Maybe`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Netco.Monads.Maybe`1.HasNothing">
            <summary>
            Gets a value indicating whether this instance has NO value.
            </summary>
            <value><c>true</c> if this instance has NO value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Netco.Monads.Maybe`1.MetaData">
            <summary>
            Gets the meta data.
            </summary>
        </member>
        <member name="T:Netco.MediatorLib.Mediator">
            <summary>
            Provides loosely-coupled messaging between
            various colleagues.  All references to objects
            are stored weakly, to prevent memory leaks.
            </summary>
            <see href="http://marlongrech.wordpress.com/2009/04/16/mediator-v2-for-mvvm-wpf-and-silverlight-applications/"/>
        </member>
        <member name="M:Netco.MediatorLib.Mediator.Register(System.Object)">
            <summary>
            Register a ViewModel to the mediator notifications
            This will iterate through all methods of the target passed and will register all methods that are decorated with the MediatorMessageSink Attribute
            </summary>
            <param name="target">The ViewModel instance to register</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/>  is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">The registered method should only have 1 parameter since the Mediator has only 1 argument to pass</exception>
        </member>
        <member name="M:Netco.MediatorLib.Mediator.Register(System.String,System.Delegate)">
            <summary>
            Registers a specific method to the Mediator notifications
            </summary>
            <param name="message">The message to register to</param>
            <param name="callback">The callback function to be called when this message is broadcasted</param>
            <exception cref="T:System.InvalidOperationException">Called in Silverlight (and it's not supported)
            <para>-or-</para>
            <para><paramref name="callback"/> delegate is static</para>
            <para>-or-</para>
            <para><paramref name="callback"/> delegate has 2 or more parameters (and it must be 0 or 1).</para>
            </exception>
        </member>
        <member name="M:Netco.MediatorLib.Mediator.RegisterCallbackMethod(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Registers the callback method.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="method">The method.</param>
            <exception cref="T:System.InvalidOperationException">The registered callback delegate should only have 0 or 1 parameter since the Mediator has up to 1 argument to pass</exception>
        </member>
        <member name="M:Netco.MediatorLib.Mediator.NotifyColleagues``1(System.String,``0)">
            <summary>
            Notify all registered parties that a specific message was broadcasted
            </summary>
            <typeparam name="T">The Type of parameter to be passed</typeparam>
            <param name="message">The message to broadcast</param>
            <param name="parameter">The parameter to pass together with the message</param>
        </member>
        <member name="M:Netco.MediatorLib.Mediator.NotifyColleagues(System.String)">
            <summary>
            Notify all registered parties that a specific message was broadcasted.
            </summary>
            <param name="message">The message to broadcast</param>
        </member>
        <member name="T:Netco.Lib.Pair`2">
            <summary>
            A generic pair class.
            </summary>
            <typeparam name="TFirst">The type of the key.</typeparam>
            <typeparam name="TSecond">The type of the value.</typeparam>
        </member>
        <member name="M:Netco.Lib.Pair`2.#ctor(Netco.Lib.Pair{`0,`1})">
            <summary>
            Constructor
            </summary>
            <param name="pair"></param>
        </member>
        <member name="M:Netco.Lib.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructor
            </summary>
            <param name="first">The key.</param>
            <param name="second">The value.</param>
        </member>
        <member name="M:Netco.Lib.Pair`2.Equals(Netco.Lib.Pair{`0,`1})">
            <summary>
            Indicates whether the current object is equal to 
            another object of the same type.
            </summary>
            <param name="pair">The pair to compare.</param>
            <returns>True if the key and value identities are the same.</returns>
            <exception cref="T:System.NullReferenceException">The provided pair was null.</exception>
        </member>
        <member name="M:Netco.Lib.Pair`2.HasSameFirst(Netco.Lib.Pair{`0,`1})">
            <summary>
            Indicates whether the current object share its
            first object with another object of the same type.
            </summary>
            <param name="pair">The pair with the first object to compare.</param>
            <returns>True if the first object identities are the same.</returns>
            <exception cref="T:System.NullReferenceException">The provided pair was null.</exception>
        </member>
        <member name="M:Netco.Lib.Pair`2.HasSameSecond(Netco.Lib.Pair{`0,`1})">
            <summary>
            Indicates whether the current object share its
            second object with another object of the same type.
            </summary>
            <param name="pair">The pair with the second object to compare.</param>
            <returns>True if the second object identities are the same.</returns>
            <exception cref="T:System.NullReferenceException">The provided pair was null.</exception>
        </member>
        <member name="M:Netco.Lib.Pair`2.ToString">
            <summary>
            Converts the key of the current pair to its 
            equivalent <see cref="T:System.String"/> representation.
            </summary>
            <returns>A String representation.</returns>
        </member>
        <member name="M:Netco.Lib.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Netco.Lib.Pair`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Netco.Lib.Pair`2.First">
            <summary>
            The first object.
            </summary>
        </member>
        <member name="P:Netco.Lib.Pair`2.Second">
            <summary>
            The second object.
            </summary>
        </member>
        <member name="T:Netco.Lib.PairExtensions">
            <summary>
            Extension methods to the pair.
            </summary>
        </member>
        <member name="M:Netco.Lib.PairExtensions.Dictionary2List``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary to a list of pairs
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns>List of pairs based on the dictionary.</returns>
        </member>
        <member name="M:Netco.Lib.PairExtensions.List2Dictionary``2(System.Collections.Generic.IList{Netco.Lib.Pair{``0,``1}})">
            <summary>
            Converts a list of pairs to a dictionary.
            </summary>
            <param name="list">The list.</param>
            <returns>Dictionary based on the list of pairs.</returns>
        </member>
        <member name="M:Netco.Lib.PairExtensions.List2TwoDimentionalDictionary``2(System.Collections.Generic.IList{Netco.Lib.Pair{``0,``1}})">
            <summary>
            Converts a list of pairs to dictionary, combining all pairs with the same key to be a list of values.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="T:Netco.Errors.ExceptionForm">
            <summary>
            Form to show details for <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="F:Netco.Errors.ExceptionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netco.Errors.ExceptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Netco.Errors.ExceptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netco.Errors.ExceptionForm.#ctor(System.Exception)">
            <summary>
            Constructs error form and initializes to show specified exception.
            </summary>
            <param name="targetException">Exception to show.</param>
        </member>
        <member name="T:Netco.Monads.Result">
            <summary> Helper class for creating <see cref="T:Netco.Monads.Result`1"/> instances </summary>
        </member>
        <member name="M:Netco.Monads.Result.CreateSuccess``1(``0)">
            <summary> Creates success result </summary>
            <typeparam name="TValue">The type of the result.</typeparam>
            <param name="value">The item.</param>
            <returns>new result instance</returns>
            <seealso cref="M:Netco.Monads.Result`1.CreateSuccess(`0)"/>
        </member>
        <member name="M:Netco.Monads.Result.Success``1(``0)">
            <summary> Creates success result </summary>
            <typeparam name="TValue">The type of the result.</typeparam>
            <param name="value">The item.</param>
            <returns>new result instance</returns>
            <seealso cref="M:Netco.Monads.Result`1.CreateSuccess(`0)"/>
        </member>
        <member name="T:Netco.Events.OnEvent">
            <summary>
            Simplifies raising events.
            </summary>
        </member>
        <member name="M:Netco.Events.OnEvent.Raise(System.EventHandler,System.Object)">
            <summary>
            Call to raise generic event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Netco.Events.OnEvent.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Call to raise event with specific event arguments.
            </summary>
            <typeparam name="T">Event arguments type.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="source">The source.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Netco.Events.OnEvent.Raise(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.String)">
            <summary>
            Call to raise event in response to a property being changed.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="source">The source.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Netco.UserInteraction.Interaction">
            <summary>
            Provides a common way to interact with the user.
            </summary>
            <remarks>Makes it easy to initialize interaction service once and reuse it
            everywhere in the program.</remarks>
        </member>
        <member name="M:Netco.UserInteraction.Interaction.Notify(System.String,System.String)">
            <summary>
            Notifies the user.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Interaction.Notify(Netco.UserInteraction.Message)">
            <summary>
            Notifies the user.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Interaction.NotifyAboutError(System.String,System.String)">
            <summary>
            Notifies user about an error.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Interaction.NotifyAboutError(Netco.UserInteraction.Message)">
            <summary>
            Notifies user about an error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Interaction.Ask(System.String,System.String)">
            <summary>
            Asks user a question.
            </summary>
            <param name="title">The question title.</param>
            <param name="question">The question.</param>
            <returns><c>true</c> if user agreed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Netco.UserInteraction.Interaction.Ask(Netco.UserInteraction.Message)">
            <summary>
            Asks user a question.
            </summary>
            <param name="question">The question.</param>
            <returns><c>true</c> if user agreed; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Netco.UserInteraction.Interaction.InteractionService">
            <summary>
            Gets or sets the user interaction service.
            </summary>
            <value>The user interaction service.</value>
            <remarks>Use this to initialize how program interacts and notifies the user.</remarks>
        </member>
        <member name="T:Netco.Threading.ReaderWriterLockSlimExtensions">
            <summary>
            Helper class that simplifies <see cref="T:System.Threading.ReaderWriterLockSlim"/> usage
            </summary>
        </member>
        <member name="M:Netco.Threading.ReaderWriterLockSlimExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the read lock object, that is released when the object is disposed.
            </summary>
            <param name="slimLock">The slim lock object.</param>
            <returns></returns>
        </member>
        <member name="M:Netco.Threading.ReaderWriterLockSlimExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the write lock, that is released when the object is disposed.
            </summary>
            <param name="slimLock">The slim lock.</param>
            <returns></returns>
        </member>
        <member name="M:Netco.Threading.ReaderWriterLockSlimExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the upgradeable read lock, that is released, when the object is disposed
            </summary>
            <param name="slimLock">The slim lock.</param>
            <returns></returns>
        </member>
        <member name="T:Netco.Events.EventArgs`1">
            <summary>
            Generic version of EventArgs to avoid 
            defining custom  EventArgs types 
            </summary>
            <typeparam name="T">Data to pass to event handler.</typeparam>
            <remarks>Based on Ayende's Rhino Commons.</remarks>
        </member>
        <member name="M:Netco.Events.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Events.EventArgs`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Netco.Events.EventArgs`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Netco.ActionPolicyServices.HandlingProvider`2">
            <summary>
            Simple reliability layer for the <see cref="T:Netco.IProvider`2"/>
            </summary>
            <typeparam name="TKey">type of the Key item</typeparam>
            <typeparam name="TValue">type of the values</typeparam>
        </member>
        <member name="T:Netco.IProvider`2">
            <summary>
            Interface that abstracts away providers
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <remarks>
            things like IDataCache (from the Database layers) or IResolver (from the IoC layers) 
            are just samples of this interface
            </remarks>
        </member>
        <member name="M:Netco.IProvider`2.Get(`0)">
            <summary>
            Retrieves <typeparamref name="TValue"/> given the
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:Netco.ResolutionException">when the key can not be resolved</exception>
        </member>
        <member name="M:Netco.ActionPolicyServices.HandlingProvider`2.#ctor(Netco.IProvider{`0,`1},Netco.ActionPolicyServices.ActionPolicy)">
            <summary>
            Creates generic reliability wrapper around the <see cref="T:Netco.IProvider`2"/>
            </summary>
            <param name="provider"></param>
            <param name="policy"></param>
        </member>
        <member name="M:Netco.ActionPolicyServices.HandlingProvider`2.Get(`0)">
            <summary>
            <see cref="M:Netco.IProvider`2.Get(`0)"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Netco.ActionPolicyServices.HandlingProvider">
            <summary>
            This shortcuts simplifies creation of <see cref="T:Netco.ActionPolicyServices.HandlingProvider"/> instances
            </summary>
        </member>
        <member name="M:Netco.ActionPolicyServices.HandlingProvider.For``2(Netco.IProvider{``0,``1},Netco.ActionPolicyServices.ActionPolicy)">
            <summary>
            Creates new instance of <see cref="T:Netco.ActionPolicyServices.HandlingProvider`2"/>
            by wrapping another <see cref="T:Netco.IProvider`2"/> instance
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="provider">The provider to wrap.</param>
            <param name="policy">The action policy.</param>
            <returns>new provider instance</returns>
        </member>
        <member name="T:Netco.Monads.MetaData">
            <summary>
            Represents meta data.
            </summary>
        </member>
        <member name="M:Netco.Monads.MetaData.GetValue``1(System.Object)">
            <summary>
            Gets the meta data.
            </summary>
            <typeparam name="TMetaValue">The type of the meta.</typeparam>
            <param name="metaKey">The meta key.</param>
            <returns>Meta data casted to the specified type.</returns>
        </member>
        <member name="M:Netco.Monads.MetaData.TryGetValue``1(System.Object)">
            <summary>
            Attempts to get meta data.
            </summary>
            <typeparam name="TMetaValue">The type of the meta.</typeparam>
            <param name="metaKey">The meta key.</param>
            <returns>Maybe with the specified meta data if meta data was found and successfully casted to the specified type.
            Otherwise empty Maybe is returned.</returns>
        </member>
        <member name="P:Netco.Monads.MetaData.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified meta key.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicLinqExtensions">
            <summary>
            Contains an extension methods for dynamic queries against <see cref="T:System.Collections.IEnumerable"/> objects in<see cref="T:System.Linq.IQueryable"/>ust IQueryable objects
            Written by Jon von Gillern
            See http://blog.nitriq.com for more information
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns an IEnumerable of all the items in the original source where the times satisify the
            predicate created from the whereClause
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Returns an IEnumerable of all the items in the original source where the times satisify the
            predicate created from the whereClause
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.CreatePredicate``1(System.String)">
            <summary>
            Creates a predicate from a string
            </summary>
            <example>
            var pred = DynamicLamba.CreatePredicate&lt;Person>("Age > 25")
            Console.WriteLine(pred(new Person { Age = 28 })); // outputs "true"
            Console.WriteLine(pred(new Person { Age = 20 })); // outputs "false"
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.CreatePredicate``1(System.String,System.Object[])">
            <summary>
            Creates a predicate from the predicate string
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Orders the items by the appropriate property
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Orders the items by the appropriate property
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.CreateComparer``1(System.String)">
            <summary>
            Creates a comparer Func
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.CreateComparer``1(System.String,System.Boolean)">
            <summary>
            Creates a comparer Func
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicLinqExtensions.CreateValueExpression``2(System.String)">
            <summary>
            Returns a function that takes an object of type TInput and evaluates an expression on the input object
            type, evaluates the expression against the object and returns the result of the expression
            </summary>
            <example>
            var getFullNameFunc = DynamicLambda.CreateValueExpression&lt;Person, string>("FirstName + \" \" + LastName");
            Console.WriteLine(getFullNameFunc(new Person { FirstName = "Jon", LastName = "von Gillern" })); //outputs "Jon von Gillern"
            
            var getPerimeterFunc = DynamicLambda.CreateValueExpression&lt;Triangle, double>("Side1 + Side2 + Side3");
            Console.WriteLine(getPerimeterFunc(new Triangle(3,4,5)); //outputs 12
            </example>
        </member>
        <member name="T:System.Linq.Dynamic.ComparerWrapper`1">
            <summary>
            Wraps comparer method.
            </summary>
            <typeparam name="T">Type of comparer.</typeparam>
        </member>
        <member name="M:System.Linq.Dynamic.ComparerWrapper`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.ComparerWrapper`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:System.Linq.Dynamic.ComparerWrapper`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicQueryable">
            <summary>
            Provides support for dynamic queries.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">The values.</param>
            <returns>Filtered query.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">The values.</param>
            <returns>Filtered query.</returns>
            <exception cref="T:System.ArgumentNullException"><c>source</c> or <c>predicate</c> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Generates dynamic query to select the data from specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="values">The values.</param>
            <returns>Query to select the data from specified source.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending order according to the expression. 
            </summary>
            <typeparam name="T">The type of the elements of source. </typeparam>
            <param name="source">The source.</param>
            <param name="ordering">The ordering.</param>
            <param name="values">The values.</param>
            <returns>Query to sort elements.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Orders the by.
            </summary>
            <param name="source">The source.</param>
            <param name="ordering">The ordering.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Takes the specified number items from the source.
            </summary>
            <param name="source">The source.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Skips the specified number of items in the source.
            </summary>
            <param name="source">The source.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <summary>
            Groups the items.
            </summary>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Any(System.Linq.IQueryable)">
            <summary>
            Selects any item is the source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Count(System.Linq.IQueryable)">
            <summary>
            Returnes number of items in the source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicClass">
            <summary>
            Class that dynamically builds <see cref="M:System.Linq.Dynamic.DynamicClass.ToString"/> depending on it's properties.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicClass.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicProperty">
            <summary>
            A dynamic property.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.DynamicProperty"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:System.Linq.Dynamic.DynamicProperty.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Linq.Dynamic.DynamicProperty.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicExpression">
            <summary>
            Dynamic expression.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.Parse(System.Type,System.String,System.Object[])">
            <summary>
            Parses the specified expression.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses the lambda.
            </summary>
            <param name="itType">It type.</param>
            <param name="resultType">Type of the result.</param>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses the lambda.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="resultType">Type of the result.</param>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda``2(System.String,System.Object[])">
            <summary>
            Parses the lambda.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.CreateClass(System.Linq.Dynamic.DynamicProperty[])">
            <summary>
            Creates the dynamic class.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.CreateClass(System.Collections.Generic.IEnumerable{System.Linq.Dynamic.DynamicProperty})">
            <summary>
            Creates the dynamic class.
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Dynamic.ParseException">
            <summary>
            Class to parse the exception.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.ParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:System.Linq.Dynamic.ParseException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="P:System.Linq.Dynamic.ParseException.Position">
            <summary>
            Gets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:Netco.DisposableAction">
            <summary>
            Class that allows action to be executed, when it is disposed
            </summary>
        </member>
        <member name="M:Netco.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.DisposableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Netco.DisposableAction.Dispose">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="T:Netco.Utils.EnumUtil`1">
            <summary>
            Strongly-typed enumeration util
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="F:Netco.Utils.EnumUtil`1.Values">
            <summary>
            Values of the <typeparamref name="TEnum"/>
            </summary>
        </member>
        <member name="F:Netco.Utils.EnumUtil`1.ValuesWithoutDefault">
            <summary>
            Values of the <typeparamref name="TEnum"/> without the default value.
            </summary>
        </member>
        <member name="F:Netco.Utils.EnumUtil`1.Comparer">
            <summary>
            Efficient comparer for the enum
            </summary>
        </member>
        <member name="M:Netco.Utils.EnumUtil`1.ConvertSafelyFrom``1(``0)">
            <summary>
            Converts the specified enum safely from the target enum. Matching is done
            via the efficient <see cref="F:Netco.Utils.EnumUtil`1.Comparer"/> initialized with <see cref="M:Netco.Monads.MaybeParse.Enum``1(System.String)"/>
            </summary>
            <typeparam name="TSourceEnum">The type of the source enum.</typeparam>
            <param name="enum">The @enum to convert from.</param>
            <returns>converted enum</returns>
            <exception cref="T:System.ArgumentException"> when conversion is not possible</exception>
        </member>
        <member name="T:Netco.UserInteraction.Message">
            <summary>
            Represents a message to be sent to the user.
            </summary>
        </member>
        <member name="P:Netco.UserInteraction.Message.Title">
            <summary>
            Gets or sets message the title.
            </summary>
            <value>The message title.</value>
        </member>
        <member name="P:Netco.UserInteraction.Message.Body">
            <summary>
            Gets or sets the actual message (body).
            </summary>
            <value>The message (body).</value>
        </member>
        <member name="P:Netco.UserInteraction.Message.IsBodyHtml">
            <summary>
            Gets or sets a value indicating whether the message is in HTML.
            </summary>
            <value>
            	<c>true</c> if this message body is in HTML; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Netco.UserInteraction.Message.From">
            <summary>
            Gets or sets from whom message is sent (if applicable).
            </summary>
            <value>From whom message is sent (if applicable).</value>
        </member>
        <member name="P:Netco.UserInteraction.Message.To">
            <summary>
            Gets or sets to whom send the message (if applicable).
            </summary>
            <value>To whom send the message (if applicable).</value>
        </member>
        <member name="T:Netco.Syntaxis.ISyntax`1">
            <summary>
            Interface for implementing decoupled configuration extensions. It hides
            unnecessary members from the IntelliSense.
            </summary>
            <typeparam name="TTarget">syntax target</typeparam>
        </member>
        <member name="M:Netco.Syntaxis.ISyntax`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Netco.Syntaxis.ISyntax`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Netco.Syntaxis.ISyntax`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Netco.Syntaxis.ISyntax`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> instance that represents the exact runtime type of the current instance.
            </returns>
        </member>
        <member name="P:Netco.Syntaxis.ISyntax`1.Target">
            <summary>
            Gets the underlying object.
            </summary>
            <value>The underlying object.</value>
        </member>
        <member name="T:Netco.ResolutionException">
            <summary>
            Exception that is thrown by <see cref="T:Netco.IProvider`2"/>
            </summary>
        </member>
        <member name="M:Netco.ResolutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.ResolutionException"/> class.
            </summary>
        </member>
        <member name="M:Netco.ResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.ResolutionException"/> class.
            </summary>
            <param name="message">The message related to this exception.</param>
        </member>
        <member name="M:Netco.ResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.ResolutionException"/> class.
            </summary>
            <param name="message">The message related to this exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Netco.ResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.ResolutionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:Netco.Profiling.Profiler">
            <summary>
            Time and memory profiling.
            </summary>
            <remarks>Profiling works through a stack. <see cref="M:Netco.Profiling.Profiler.Start(System.String)"/> saves current time
            and starts profiling. <see cref="M:Netco.Profiling.Profiler.End"/> stops profiling and logs current results.
            <see cref="M:Netco.Profiling.Profiler.End"/> must be called in reverse from <see cref="M:Netco.Profiling.Profiler.Start(System.String)"/> order.</remarks>
        </member>
        <member name="M:Netco.Profiling.Profiler.Start(System.String)">
            <summary>
            Starts profiler.
            </summary>
            <param name="name">The name of the profile.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Netco.Profiling.Profiler.End">
            <summary>
            Ends profiler with the specified message.
            </summary>
            <returns><see cref="T:Netco.Profiling.ProfilingInfo"/> holding info about the current profiling.</returns>
            <remarks>Logs time profiler ran and memory used delta.</remarks>
        </member>
        <member name="M:Netco.Profiling.Profiler.End(System.String)">
            <summary>
            Ends profiler with the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns><see cref="T:Netco.Profiling.ProfilingInfo"/> holding info about the current profiling.</returns>
            <remarks>Logs time profiler ran and memory used delta.</remarks>
        </member>
        <member name="M:Netco.Profiling.Profiler.GetCurrentMemory">
            <summary>
            Gets the current used memory.
            </summary>
            <returns>Bytes allocated to the current process.</returns>
        </member>
        <member name="M:Netco.Profiling.Profiler.GetCurrentMemoryInMB">
            <summary>
            Gets the current memory in MB.
            </summary>
            <returns>Megabytes allocated to the current process.</returns>
        </member>
        <member name="M:Netco.Profiling.Profiler.GetCurrentMemoryGC">
            <summary>
            Gets the current memory thought to be allocated by GC.
            </summary>
            <returns>Bytes allocated by GC.</returns>
            <seealso cref="M:System.GC.GetTotalMemory(System.Boolean)"/>
        </member>
        <member name="M:Netco.Profiling.Profiler.GetCurrentMemoryGCInMB">
            <summary>
            Gets the current memory thought to be allocated by GC in MB.
            </summary>
            <returns>Megabytes allocated by GC.</returns>
            <seealso cref="M:System.GC.GetTotalMemory(System.Boolean)"/>
        </member>
        <member name="P:Netco.Profiling.Profiler.EnableProfiling">
            <summary>
            Gets or sets a value indicating whether profiling is enabled.
            </summary>
            <value><c>true</c> to enable profiling; otherwise, <c>false</c>.</value>
            <remarks>By default profiling is enabled.
            <para>This affects prevents profiling from getting started. If any profiling is
            taking place it will be ended regardless what this property value is.</para></remarks>
        </member>
        <member name="P:Netco.Profiling.Profiler.EnableLogging">
            <summary>
            Gets or sets a value indicating whether to log profiling results.
            </summary>
            <value><c>true</c> to log results; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Netco.Profiling.Profiler.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:Netco.Monads.MaybeParse">
            <summary>
            	Helper routines for converting strings into Maybe
            </summary>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Enum``1(System.String)">
            <summary>
            	Tries to parse the specified string into the enum, returning empty result
            	on failure. We ignore case in this scenario.
            </summary>
            <typeparam name="TEnum">
            	The type of the enum.
            </typeparam>
            <param name="value">The value.</param>
            <returns>
            	either enum or an empty result
            </returns>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Enum``1(System.String,System.Boolean)">
            <summary>
            	Tries to parse the specified string into the enum, returning empty result
            	on failure
            </summary>
            <typeparam name="TEnum">
            	The type of the enum.
            </typeparam>
            <param name="value">The value.</param>
            <param name="ignoreCase">
            	if set to
            	<c>true</c>
            	then parsing will ignore case.
            </param>
            <returns>
            	either enum or an empty result
            </returns>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Decimal(System.String)">
            <summary>
            	Tries to parse the specified value into Decimal, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Decimal or an empty result
            </returns>
            <seealso cref="M:System.Decimal.TryParse(System.String,System.Decimal@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Decimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            	Tries to parse the specified value into decimal, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <param name="numberStyles">
            	The number styles to use.
            </param>
            <param name="formatProvider">
            	The format provider to use.
            </param>
            <returns>
            	either parsed decimal or an empty result
            </returns>
            <seealso cref="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.DecimalInvariant(System.String)">
            <summary>
            	Tries to parse the specified value into decimal, using the invariant culture
            	info and returning	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed decimal or an empty result
            </returns>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Int32(System.String)">
            <summary>
            	Tries to parse the specified value into Int32, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Int32 or an empty result
            </returns>
            <seealso cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Int32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            	Tries to parse the specified value into Int32, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <param name="numberStyles">
            	The number styles to use.
            </param>
            <param name="formatProvider">
            	The format provider to use.
            </param>
            <returns>
            	either parsed Int32 or an empty result
            </returns>
            <seealso cref="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Int32Invariant(System.String)">
            <summary>
            	Tries to parse the specified string value into Int32, 
            	using an invariant culture and returning empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Int32 or an empty result
            </returns>
            <seealso cref="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Int64(System.String)">
            <summary>
            	Tries to parse the specified value into Int64, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Int64 or an empty result
            </returns>
            <seealso cref="M:System.Int64.TryParse(System.String,System.Int64@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Int64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            	Tries to parse the specified value into Int64, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <param name="numberStyles">
            	The number styles to use.
            </param>
            <param name="formatProvider">
            	The format provider to use.
            </param>
            <returns>
            	either parsed Int64 or an empty result
            </returns>
            <seealso cref="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Int64Invariant(System.String)">
            <summary>
            	Tries to parse the specified string value into Int64, 
            	using an invariant culture and returning empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Int64 or an empty result
            </returns>
            <seealso cref="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Double(System.String)">
            <summary>
            	Tries to parse the specified value into Double, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Double or an empty result
            </returns>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Double(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            	Tries to parse the specified value into Double, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <param name="numberStyles">
            	The number styles to use.
            </param>
            <param name="formatProvider">
            	The format provider to use.
            </param>
            <returns>
            	either parsed Double or an empty result
            </returns>
            <seealso cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.DoubleInvariant(System.String)">
            <summary>
            	Attempts to parse the specified value into Double, 
            	using invariant culture and returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Double or an empty result
            </returns>
            <seealso cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Single(System.String)">
            <summary>
            	Tries to parse the specified value into Single, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Single or an empty result
            </returns>
            <seealso cref="M:System.Single.TryParse(System.String,System.Single@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.Single(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            	Tries to parse the specified value into Single, returning
            	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <param name="numberStyles">
            	The number styles to use.
            </param>
            <param name="formatProvider">
            	The format provider to use.
            </param>
            <returns>
            	either parsed Single or an empty result
            </returns>
            <seealso cref="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)"/>
        </member>
        <member name="M:Netco.Monads.MaybeParse.SingleInvariant(System.String)">
            <summary>
            	Tries to parse the specified value into Single, using invariant culture
            	and returning 	empty result on failure.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	either parsed Single or an empty result
            </returns>
            <seealso cref="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)"/>
        </member>
        <member name="T:Netco.MediatorLib.MediatorMessageSinkAttribute">
            <summary>
            Attribute to decorate a method to be registered to the Mediator
            </summary>
        </member>
        <member name="M:Netco.MediatorLib.MediatorMessageSinkAttribute.#ctor(System.String)">
            <summary>
            Constructs a method
            </summary>
            <param name="message">The message to subscribe to</param>
        </member>
        <member name="P:Netco.MediatorLib.MediatorMessageSinkAttribute.Message">
            <summary>
            The message to register to 
            </summary>
        </member>
        <member name="P:Netco.MediatorLib.MediatorMessageSinkAttribute.ParameterType">
            <summary>
            The type of parameter for the Method
            </summary>
        </member>
        <member name="T:Netco.Logging.ILogger">
            <summary>
            Logger interface to use for logging.
            </summary>
            <remarks>Logging providers are expected to implement this.</remarks>
        </member>
        <member name="M:Netco.Logging.ILogger.Trace(System.String)">
            <summary>
            Logs the trace message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Trace(System.Exception,System.String)">
            <summary>
            Logs the trace message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Logs the trace message.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the trace message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Debug(System.String)">
            <summary>
            Logs the debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Debug(System.Exception,System.String)">
            <summary>
            Logs the debug message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the debug message.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the debug message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Info(System.String)">
            <summary>
            Logs the info message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Info(System.Exception,System.String)">
            <summary>
            Logs the info message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs the info message.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the info message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Warn(System.String)">
            <summary>
            Logs the warn message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Warn(System.Exception,System.String)">
            <summary>
            Logs the warn message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the warn message.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the warn message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Error(System.String)">
            <summary>
            Logs the error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Error(System.Exception,System.String)">
            <summary>
            Logs the error message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs the error message.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the error message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Fatal(System.String)">
            <summary>
            Logs the fatal message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Fatal(System.Exception,System.String)">
            <summary>
            Logs the fatal message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the fatal message.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Netco.Logging.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the fatal message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="format">The format string.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="T:Netco.Logging.ILoggerFactory">
            <summary>
            Logger factory interface. Supplies logger for each log call.
            </summary>
            <remarks>Needs to be implemented by each separate logger provider.</remarks>
        </member>
        <member name="M:Netco.Logging.ILoggerFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger to log message for the specified type.
            </summary>
            <param name="objectToLogType">Type of the object to log.</param>
            <returns>Logger to log messages for the specified type.</returns>
        </member>
        <member name="T:Netco.Logging.LogExtensions">
            <summary>
            Extends all objects to support logging.
            </summary>
        </member>
        <member name="M:Netco.Logging.LogExtensions.Log``1(``0)">
            <summary>
            Gets the logger for the specified object.
            </summary>
            <typeparam name="T">Type of the object for which to get the logger.</typeparam>
            <param name="needToLogObj">The need to log obj.</param>
            <returns>The logger for the specified object.</returns>
        </member>
        <member name="T:Netco.Logging.NetcoLogger">
            <summary>
            Provides maing logging support.
            </summary>
        </member>
        <member name="M:Netco.Logging.NetcoLogger.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="objectToLogType">Type of the object to log.</param>
            <returns>Logger to log messages for the specified object type.</returns>
        </member>
        <member name="P:Netco.Logging.NetcoLogger.LoggerFactory">
            <summary>
            Gets or sets the logger factory.
            </summary>
            <value>The logger factory that will supply the logger.</value>
        </member>
        <member name="T:Netco.Utils.SystemUtil">
            <summary>
            System utils to improve testability of the code
            </summary>
        </member>
        <member name="F:Netco.Utils.SystemUtil.SleepAction">
            <summary>
            <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/>
            </summary>
        </member>
        <member name="F:Netco.Utils.SystemUtil.DateTimeProvider">
            <summary>
            Allows to set custom date time implementation for the testing purposes.
            </summary>
        </member>
        <member name="M:Netco.Utils.SystemUtil.Reset">
            <summary>
            Returns all overridable functions to default. To be used by test teardowns
            </summary>
        </member>
        <member name="M:Netco.Utils.SystemUtil.SetSleep(System.Action{System.TimeSpan})">
            <summary>
            Sets the custom sleep routine.
            </summary>
            <param name="sleepRoutine">The sleep routine.</param>
        </member>
        <member name="M:Netco.Utils.SystemUtil.SetDateTimeProvider(System.Func{System.DateTime})">
            <summary>
            Sets the custom date time provider routine.
            </summary>
            <param name="dateTimeProvider">The date time provider.</param>
        </member>
        <member name="M:Netco.Utils.SystemUtil.SetTime(System.DateTime)">
            <summary>
            Shortcut to set the custom date time.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:Netco.Utils.SystemUtil.Sleep(System.TimeSpan)">
            <summary>
            Invokes the method associated with sleeping. For the production purposes
            this should be a call to <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/>
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="P:Netco.Utils.SystemUtil.Now">
            <summary>
            <see cref="P:System.DateTime.Now"/>
            </summary>
        </member>
        <member name="P:Netco.Utils.SystemUtil.UtcNow">
            <summary>
            <see cref="P:System.DateTime.UtcNow"/>
            </summary>
        </member>
        <member name="P:Netco.Utils.SystemUtil.NowOffset">
            <summary>
            Unambiguous date and time with UTC offset, <see cref="P:System.DateTimeOffset.Now"/>.
            </summary>
        </member>
        <member name="T:Netco.UserInteraction.Impl.MailNotification">
            <summary>
            Notifies users through email.
            </summary>
            <remarks>You can configure SMTP server using <c>app.config</c> or <c>web.config</c>. See <see href="http://weblogs.asp.net/scottgu/archive/2005/12/10/432854.aspx"/>
            and MSDN for further details.</remarks>
        </member>
        <member name="M:Netco.UserInteraction.Impl.MailNotification.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.UserInteraction.Impl.MailNotification"/> class.
            </summary>
            <param name="toEmail">To email.</param>
            <param name="fromEmail">From email.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.MailNotification.Notify(System.String,System.String)">
            <summary>
            Notifies the user.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.MailNotification.Notify(Netco.UserInteraction.Message)">
            <summary>
            Notifies the specified user using supplied message.
            </summary>
            <param name="message">The message to email to the user.</param>
            <remarks>If to or from are not supplied, default values are used.</remarks>
        </member>
        <member name="M:Netco.UserInteraction.Impl.MailNotification.NotifyAboutError(System.String,System.String)">
            <summary>
            Notifies user about an error.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Netco.UserInteraction.Impl.MailNotification.NotifyAboutError(Netco.UserInteraction.Message)">
            <summary>
            Notifies the user about an error using supplied message.
            </summary>
            <param name="message">The message to show to the user.</param>
        </member>
        <member name="T:Netco.Logging.ConsoleLogger">
            <summary>
            Sends all log messages to the console.
            </summary>
        </member>
        <member name="M:Netco.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Logging.ConsoleLogger"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Netco.Logging.ConsoleLogger.LM(System.String[])">
            <summary>
            Logs the specified message.
            </summary>
            <param name="messages">All message to log.</param>
        </member>
        <member name="P:Netco.Logging.ConsoleLogger.SeparateLogEntries">
            <summary>
            Gets or sets a value indicating whether to separate log entries.
            </summary>
            <value><c>true</c> if separate log entries with new line; otherwise, <c>false</c>.</value>
            <remarks>When entries are separated, they are easier to read, but take up more space.</remarks>
        </member>
        <member name="T:Netco.Logging.ConsoleLoggerFactory">
            <summary>
            Returns console logger for the specified object type.
            </summary>
        </member>
        <member name="M:Netco.Logging.ConsoleLoggerFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger to log message for the specified type.
            </summary>
            <param name="objectToLogType">Type of the object to log.</param>
            <returns>
            Logger to log messages for the specified type.
            </returns>
        </member>
        <member name="P:Netco.Logging.ConsoleLoggerFactory.SeparateLogEntries">
            <summary>
            Gets or sets a value indicating whether to separate log entries.
            </summary>
            <value><c>true</c> if separate log entries with new line; otherwise, <c>false</c>.</value>
            <remarks>When entries are separated, they are easier to read, but take up more space.</remarks>
        </member>
        <member name="T:Netco.ActionPolicyServices.ExceptionHandler">
            <summary> This delegate represents <em>catch</em> block
            </summary>
            <param name="ex">Exception to handle</param>
            <returns><em>true</em> if we can handle exception</returns>
        </member>
        <member name="T:Netco.MediatorLib.MessageToActionsMap">
            <summary>
            This class is an implementation detail of the Mediator class.
            This will store all actions to be invoked
            </summary>
        </member>
        <member name="M:Netco.MediatorLib.MessageToActionsMap.AddAction(System.String,System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Adds an action to the list
            </summary>
            <param name="message">The message to register to </param>
            <param name="target">The target object to invoke</param>
            <param name="method">The method in the target object to invoke</param>
            <param name="actionType">The Type of the action</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> or <paramref name="method"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Netco.MediatorLib.MessageToActionsMap.GetActions(System.String)">
            <summary>
            Gets the list of actions to be invoked for the specified message
            </summary>
            <param name="message">The message to get the actions for</param>
            <returns>Returns a list of actions that are registered to the specified message</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <c>null</c></exception>
        </member>
        <member name="T:Netco.Logging.NullLogger">
            <summary>
            Basic logger that does nothing. No messages will be logged.
            </summary>
        </member>
        <member name="T:Netco.Logging.NullLoggerFactory">
            <summary>
            Returns <see cref="T:Netco.Logging.NullLogger"/> for all object types.
            </summary>
        </member>
        <member name="M:Netco.Logging.NullLoggerFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger to log message for the specified type.
            </summary>
            <param name="objectToLogType">Type of the object to log.</param>
            <returns>
            Logger to log messages for the specified type.
            </returns>
        </member>
        <member name="T:Netco.Lib.StringOr`1">
            <summary>
            Holds an object and corresponding string value.
            </summary>
            <typeparam name="TOther">The type of the other.</typeparam>
            <see href="http://weblogs.asp.net/leftslipper/archive/2009/04/01/the-string-or-the-cat-a-new-net-framework-library.aspx"/>
        </member>
        <member name="M:Netco.Lib.StringOr`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Lib.StringOr`1"/> class.
            </summary>
            <param name="otherValue">The other value.</param>
            <remarks>String value is retrieved using <see cref="M:System.Object.ToString"/>.</remarks>
        </member>
        <member name="M:Netco.Lib.StringOr`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Lib.StringOr`1"/> class.
            </summary>
            <param name="stringValue">The string value.</param>
            <param name="otherValue">The other value.</param>
        </member>
        <member name="M:Netco.Lib.StringOr`1.op_Implicit(Netco.Lib.StringOr{`0})~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Netco.Lib.StringOr`1"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Netco.Lib.StringOr`1.op_Implicit(Netco.Lib.StringOr{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Netco.Lib.StringOr`1"/> to <c>TOther</c> type.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Netco.Lib.StringOr`1.StringValue">
            <summary>
            Gets or sets the string value.
            </summary>
            <value>The string value.</value>
        </member>
        <member name="P:Netco.Lib.StringOr`1.OtherValue">
            <summary>
            Gets or sets the other value.
            </summary>
            <value>The other value.</value>
        </member>
        <member name="T:Netco.Threading.WaitFor`1">
            <summary>
            Helper class for invoking tasks with timeout. Overhead is 0,005 ms.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Netco.Threading.WaitFor`1.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Threading.WaitFor`1"/> class, 
            using the specified timeout for all operations.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Netco.Threading.WaitFor`1.Run(System.Func{`0})">
            <summary>
            Executes the specified function within the current thread, aborting it
            if it does not complete within the specified timeout interval. 
            </summary>
            <param name="function">The function.</param>
            <returns>result of the function</returns>
            <remarks>
            The performance trick is that we do not interrupt the current
            running thread. Instead, we just create a watcher that will sleep
            until the originating thread terminates or until the timeout is
            elapsed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">if function is null</exception>
            <exception cref="T:System.TimeoutException">if the function does not finish in time </exception>
        </member>
        <member name="M:Netco.Threading.WaitFor`1.Run(System.TimeSpan,System.Func{`0})">
            <summary>
            Executes the specified function within the current thread, aborting it
            if it does not complete within the specified timeout interval.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="function">The function.</param>
            <returns>result of the function</returns>
            <remarks>
            The performance trick is that we do not interrupt the current
            running thread. Instead, we just create a watcher that will sleep
            until the originating thread terminates or until the timeout is
            elapsed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">if function is null</exception>
            <exception cref="T:System.TimeoutException">if the function does not finish in time </exception>
        </member>
        <member name="T:Netco.Profiling.ProfilingInfo">
            <summary>
            Holds profiling information.
            </summary>
        </member>
        <member name="P:Netco.Profiling.ProfilingInfo.StartTime">
            <summary>
            Gets the profiling start time.
            </summary>
            <value>The profiling start time.</value>
        </member>
        <member name="P:Netco.Profiling.ProfilingInfo.StartMemory">
            <summary>
            Gets the profiling start memory.
            </summary>
            <value>The profiling start memory.</value>
        </member>
        <member name="P:Netco.Profiling.ProfilingInfo.EndTime">
            <summary>
            Gets the profiling end time.
            </summary>
            <value>The profiling end time.</value>
        </member>
        <member name="P:Netco.Profiling.ProfilingInfo.EndMemory">
            <summary>
            Gets the profiling end memory.
            </summary>
            <value>The profiling end memory.</value>
        </member>
        <member name="P:Netco.Profiling.ProfilingInfo.Duration">
            <summary>
            Gets the profiling span.
            </summary>
            <value>The profiling span.</value>
        </member>
        <member name="P:Netco.Profiling.ProfilingInfo.MemoryDelta">
            <summary>
            Gets the memory delta.
            </summary>
            <value>The memory delta.</value>
        </member>
        <member name="P:Netco.Profiling.ProfilingInfo.Name">
            <summary>
            Gets the profiling name.
            </summary>
            <value>The profiling name.</value>
        </member>
        <member name="T:Netco.Extensions.AssemblyExtensions">
            <summary>
            Adds extensions to simplify working with <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Netco.Extensions.AssemblyExtensions.GetOriginalLocation(System.Reflection.Assembly)">
            <summary>
            Gets the original location of an assembly (before it was shadow-copied).
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>Original location of the assembly.</returns>
            <remarks>Original location or <see cref="F:System.String.Empty"/> if location couldn't be determined (because assembly was loaded
            from byte array for example).</remarks>
        </member>
        <member name="T:Netco.ActionPolicyServices.ExceptionHandlerSyntax">
            <summary> Fluent API for defining <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/> 
            that allows to handle exceptions. </summary>
        </member>
        <member name="M:Netco.ActionPolicyServices.ExceptionHandlerSyntax.Retry(Netco.Syntaxis.Syntax{Netco.ActionPolicyServices.ExceptionHandler},System.Int32)">
            <summary>
            Builds <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/> that will retry exception handling
            for a couple of times before giving up.
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="retryCount">The retry count.</param>
            <returns>reusable instance of policy</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ExceptionHandlerSyntax.Retry(Netco.Syntaxis.Syntax{Netco.ActionPolicyServices.ExceptionHandler},System.Int32,System.Action{System.Exception,System.Int32})">
            <summary>
            Builds <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/> that will retry exception handling
            for a couple of times before giving up.
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="retryCount">The retry count.</param>
            <param name="onRetry">The action to perform on retry (i.e.: write to log).
            First parameter is the exception and second one is its number in sequence. </param>
            <returns>reusable policy instance </returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ExceptionHandlerSyntax.RetryForever(Netco.Syntaxis.Syntax{Netco.ActionPolicyServices.ExceptionHandler},System.Action{System.Exception})">
            <summary> Builds <see cref="T:Netco.ActionPolicyServices.ActionPolicy"/> that will keep retrying forever </summary>
            <param name="syntax">The syntax to extend.</param>
            <param name="onRetry">The action to perform when the exception could be retried.</param>
            <returns> reusable instance of policy</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ExceptionHandlerSyntax.WaitAndRetry(Netco.Syntaxis.Syntax{Netco.ActionPolicyServices.ExceptionHandler},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary> <para>Builds the policy that will keep retrying as long as 
            the exception could be handled by the <paramref name="syntax"/> being 
            built and <paramref name="sleepDurations"/> is providing the sleep intervals.
            </para>
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="sleepDurations">The sleep durations.</param>
            <param name="onRetry">The action to perform on retry (i.e.: write to log).
            First parameter is the exception and second one is the planned sleep duration. </param>
            <returns>new policy instance</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ExceptionHandlerSyntax.WaitAndRetry(Netco.Syntaxis.Syntax{Netco.ActionPolicyServices.ExceptionHandler},System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary> <para>Builds the policy that will keep retrying as long as 
            the exception could be handled by the <paramref name="syntax"/> being 
            built and <paramref name="sleepDurations"/> is providing the sleep intervals.
            </para>
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="sleepDurations">The sleep durations.</param>
            <returns>new policy instance</returns>
        </member>
        <member name="M:Netco.ActionPolicyServices.ExceptionHandlerSyntax.CircuitBreaker(Netco.Syntaxis.Syntax{Netco.ActionPolicyServices.ExceptionHandler},System.TimeSpan,System.Int32)">
            <summary>
             <para>Builds the policy that will "break the circuit" after <paramref name="countBeforeBreaking"/>
            exceptions that could be handled by the <paramref name="syntax"/> being built. The circuit 
            stays broken for the <paramref name="duration"/>. Any attempt to
            invoke method within the policy, while the circuit is broken, will immediately re-throw
            the last exception.  </para>
            <para>If the action fails within the policy after the block period, then the breaker 
            is blocked again for the next <paramref name="duration"/>.
            It will be reset, otherwise.</para> 
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="duration">How much time the breaker will stay open before resetting</param>
            <param name="countBeforeBreaking">How many exceptions are needed to break the circuit</param>
            <returns>shared policy instance</returns>
            <remarks>(see "ReleaseIT!" for the details)</remarks>
        </member>
        <member name="T:Netco.Utils.EnumUtil`2">
            <summary>
            Ensures that enums can be converted between each other
            </summary>
            <typeparam name="TFromEnum">The type of from enum.</typeparam>
            <typeparam name="TToEnum">The type of to enum.</typeparam>
        </member>
        <member name="T:Netco.Syntaxis.Syntax`1">
            <summary>
            Helper class for creating fluent APIs
            </summary>
            <typeparam name="TTarget">underlying type</typeparam>
        </member>
        <member name="T:Netco.Syntaxis.Syntax">
            <summary>
            Helper class for creating fluent APIs, that hides unused signatures
            </summary>
        </member>
        <member name="M:Netco.Syntaxis.Syntax.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Netco.Syntaxis.Syntax.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Netco.Syntaxis.Syntax.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Netco.Syntaxis.Syntax.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> instance that represents the exact runtime type of the current instance.
            </returns>
        </member>
        <member name="M:Netco.Syntaxis.Syntax.For``1(``0)">
            <summary>
            Creates the syntax for the specified target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="inner">The inner.</param>
            <returns>new syntax instance</returns>
        </member>
        <member name="M:Netco.Syntaxis.Syntax`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Netco.Syntaxis.Syntax`1"/> class.
            </summary>
            <param name="inner">The underlying instance.</param>
        </member>
        <member name="P:Netco.Syntaxis.Syntax`1.Target">
            <summary>
            Gets the underlying object.
            </summary>
            <value>The underlying object.</value>
        </member>
        <member name="T:Netco.Monads.MaybeExtensions">
            <summary>
            Provides extension methods for Maybe monad.
            </summary>
        </member>
        <member name="M:Netco.Monads.MaybeExtensions.SelectMany``2(Netco.Monads.Maybe{``0},System.Func{``0,Netco.Monads.Maybe{``1}})">
            <summary>
            Selects <typeparamref name="TSource"/> using <paramref name="sourceToMaybeResult"/>.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TResult">Expected result type to wrap in <see cref="T:Netco.Monads.Maybe"/>.</typeparam>
            <param name="source">Source object to select.</param>
            <param name="sourceToMaybeResult">Function to select <paramref name="source"/> in order to get <typeparamref name="TResult"/>.</param>
            <returns><see cref="T:Netco.Monads.Maybe"/> class, possibly with results of the <paramref name="sourceToMaybeResult"/>.</returns>
            <seealso href="http://jystic.com/2009/09/08/whats-with-nullreferenceexceptions-anyway/"/>
        </member>
        <member name="M:Netco.Monads.MaybeExtensions.SelectMany``3(Netco.Monads.Maybe{``0},System.Func{``0,Netco.Monads.Maybe{``1}},System.Func{``0,``1,Netco.Monads.Maybe{``2}})">
            <summary>
            Selects <typeparamref name="TA"/> using <paramref name="aToMaybeB"/> and <paramref name="abToMaybeC"/>.
            </summary>
            <typeparam name="TA">The type of the source.</typeparam>
            <typeparam name="TB">The type of the intermidiate.</typeparam>
            <typeparam name="TC">The type of the result.</typeparam>
            <param name="maybeA">The source.</param>
            <param name="aToMaybeB">The second value selector.</param>
            <param name="abToMaybeC">The result selector.</param>
            <returns><see cref="T:Netco.Monads.Maybe"/> class, possibly with results of the <paramref name="abToMaybeC"/>.</returns>
            <remarks>Required to use LINQ for selection.</remarks>
            <example>
            var packagedSalad = from apple in PickApple()
            from orange in PickOrange()
            from fruitSalad in MakeFruitSalad(apple, orange)
            select PackageForSale(fruitSalad);
            </example>
        </member>
        <member name="M:Netco.Monads.MaybeExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated  with the specified key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns><see cref="T:Netco.Monads.Maybe`1"/> with the result, or empty <see cref="T:Netco.Monads.Maybe`1"/> if there's no object in the dictionary
            with the specified key.</returns>
        </member>
        <member name="T:Netco.Monads.Maybe">
            <summary>
            Helper routines for <see cref="T:Netco.Monads.Maybe`1"/>
            </summary>
        </member>
        <member name="M:Netco.Monads.Maybe.From``1(``0)">
            <summary>
            Creates new <see cref="T:Netco.Monads.Maybe`1"/> from the provided value
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="item">The item.</param>
            <returns><see cref="T:Netco.Monads.Maybe`1"/> that matches the provided value</returns>
            <exception cref="T:System.ArgumentNullException">if argument is a null reference</exception>
        </member>
        <member name="F:Netco.Monads.Maybe.Bool">
            <summary>
            Optional empty boolean
            </summary>
        </member>
        <member name="F:Netco.Monads.Maybe.String">
            <summary>
            Optional empty string
            </summary>
        </member>
    </members>
</doc>
