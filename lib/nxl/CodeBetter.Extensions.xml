<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeBetter.Extensions</name>
    </assembly>
    <members>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.YearsAgo(System.Int32)">
            <summary>
            Returns the date the number of years ago
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.MonthsAgo(System.Int32)">
            <summary>
            Returns the date the number of months ago
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.DaysAgo(System.Int32)">
            <summary>
            Returns the date the number of days ago
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.HoursAgo(System.Int32)">
            <summary>
            Returns the date the number of hours ago
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.MinutesAgo(System.Int32)">
            <summary>
            Returns the date the number of minutes ago
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.SecondsAgo(System.Int32)">
            <summary>
            Returns the date the seconds of years ago
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.YearsFromNow(System.Int32)">
            <summary>
            Returns the date the number of years from now
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.MonthsFromNow(System.Int32)">
            <summary>
            Returns the date the number of months from now
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.DaysFromNow(System.Int32)">
            <summary>
            Returns the date the number of days from now
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.HoursFromNow(System.Int32)">
            <summary>
            Returns the date the number of hours from now
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.MinutesFromNow(System.Int32)">
            <summary>
            Returns the date the number of minutes from now
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.SecondsFromNow(System.Int32)">
            <summary>
            Returns the date the number of seconds from now
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.IsLeapYear(System.Int32)">
            <summary>
            Returns true if the given year is a leap year
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.Days(System.Int32)">
            <summary>
            Returns a timespan for the number of days
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.Hours(System.Int32)">
            <summary>
            Returns a timespan for the number of hours
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.Minutes(System.Int32)">
            <summary>
            Returns a timespan for the number of minutes
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntDateExtensions.Seconds(System.Int32)">
            <summary>
            Returns a timespan for the number of seconds
            </summary>
        </member>
        <member name="T:CodeBetter.Extensions.BinHexEncoding">
            <summary>
            Contains unsafe code but it is copied from System.Runtime.Serialization.dll System.Text.BinHexEncoding
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.ByteExtensions.ToHex(System.Byte[],CodeBetter.Extensions.HexOptions)">
            <summary>
            Converts a byte array into a hex string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.ByteExtensions.ToHex(System.Byte[])">
            <summary>
            Converts a byte array into a hex string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.ByteExtensions.Reverse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeUrl(System.String)">
            <summary>
            UrlEncodes a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.DecodeUrl(System.String)">
            <summary>
            UrlDecodes a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeHtml(System.String)">
            <summary>
            HtmlEncodes a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.DecodeHtml(System.String)">
            <summary>
            HtmlDecodes a string
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeBase64(System.String)">
            <summary>
            Base64's a string with the default encoding type
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeBase64(System.String,CodeBetter.Extensions.EncodingType)">
            <summary>
            Base64's a string with the specified encoding type
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.DecodeBase64(System.String)">
            <summary>
            Decodes a base64 string using the default encoding type
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.DecodeBase64(System.String,CodeBetter.Extensions.EncodingType)">
            <summary>
            Decodes a base64 string using the specified encoding type
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeJavascript(System.String)">
            <summary>
            Escapes the single quotes within a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.ToBytes(System.String)">
            <summary>
            Converts a string to bytes
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.ToBytes(System.String,CodeBetter.Extensions.EncodingType)">
            <summary>
            Converts a string to bytes
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeMd5(System.String)">
            <summary>
            Creates an EncodeMd5 of a string using the default encoding type
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeMd5(System.String,CodeBetter.Extensions.EncodingType)">
            <summary>
            Creates an EncodeMd5 of a string using the specified encoding type
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeSha1(System.String)">
            <summary>
            Creates an EncodeSha1 of a string using the default encoding
            </summary>     
        </member>
        <member name="M:CodeBetter.Extensions.StringConversionExtensions.EncodeSha1(System.String,CodeBetter.Extensions.EncodingType)">
            <summary>
            Creates an EncodeSha1 of a string using the specified encoding
            </summary>      
        </member>
        <member name="T:CodeBetter.Extensions.Money">
            <summary>
            A class used to represent money
            </summary>
            <remarks>
            Contributted by Jason Hunt,
            http://noticeablydifferent.com/
            </remarks>
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the list
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.EachIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified action on each element of the list and includes
            an index value (starting at 0)
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Validates that the predicate is true for each element of the list
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Retuns a list of all items matching the predicate
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Retuns the first matching item
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.Index``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Finds the index of an item
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines whether or not the item exists
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            new
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            new
            </summary>
            <param name="list"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CodeBetter.Extensions.IEnumerableExtensions.IsNullOrEmpty(System.ComponentModel.IListSource)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="F:CodeBetter.Extensions.SystemTime.Now">
            <summary>
            Returns the current DateTime.
            </summary>
            <remarks>
            This is an alias for DateTime.Now; however, given
            that it's writable, it makes unit testing of time-sensitive code far easier.
            
            Contributed by Oren Eini, 
            http://www.ayende.com/Blog/archive/2008/07/07/Dealing-with-time-in-tests.aspx
            </remarks>
        </member>
        <member name="M:CodeBetter.Extensions.StringValidationExtensions.IsEmail(System.String)">
            <summary>
            Validates that a string is a syntactically valid email address
            </summary>
            <param name="email">The string to validate</param>
            <returns>True if the string is a valid email, false otherwise</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringValidationExtensions.IsBadWord(System.String)">
            <summary>
            Determines whether a word is potentially a bad word
            </summary>
            <remarks>
            The bad-word list comes form an embedded resource, modifications can be made by getting 
            the source and changing BadWordList.txt.
            
            Matches are intentionally kept loose. This means "afuck" won't be considered a bad word,
            it also means Shelly (hello) or Bass (ass) won't be considered a bad word. This might be
            tweaked int he future.
            </remarks>      
            <returns>True if the word is a bad word, false otherwise</returns>
        </member>
        <member name="M:CodeBetter.Extensions.IntMathExtensions.IsEven(System.Int32)">
            <summary>
            Determines if a number is even or not
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IntMathExtensions.IsOdd(System.Int32)">
            <summary>
            Determines if a number is odd or not
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntMathExtensions.MultipleOf(System.Int32,System.Int32[])">
            <summary>
            if the number is a multiple of all supplied factors
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IntMathExtensions.FactorOf(System.Int32,System.Int32[])">
            <summary>
            if the number is a factor of all supplied multiples
            </summary>
        </member>
        <member name="T:CodeBetter.Extensions.IDictionaryExtensions">
            <remarks>
            Most of these were contributted by DimeBrain:
            http://www.dimebrain.com/2008/07/idictionarys-mi.html
            </remarks>
        </member>
        <member name="M:CodeBetter.Extensions.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            returns true if the value is in the dictionary
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IDictionaryExtensions.TryGetKey``2(System.Collections.Generic.IDictionary{``0,``1},``1,``0@)">
            <summary>
            Gets the first key with the matching value. Returns true if the value is found, false if not.
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.IDictionaryExtensions.TryGetKeys``2(System.Collections.Generic.IDictionary{``0,``1},``1,``0[]@)">
            <summary>
            Gets all of th ekeys with the matching value. Returns true if the value is found, false if not.
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Is(System.String,System.String)">
            <summary>
            Compares a string to a given string. The comparison is case insensitive.
            </summary>      
            <param name="compareTo">The string to compare against</param>
            <returns>True if the strings are the same, false otherwise.</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.CreateType``1(System.String,System.Object[])">
            <summary>
            Creates a type from the given name
            </summary>
            <typeparam name="T">The type being created</typeparam>      
            <param name="args">Arguments to pass into the constructor</param>
            <returns>An instance of the type</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.NewlineToBr(System.String)">
            <summary>
            Replaces each newline with a &lt;br /&gt; tag
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.StripHtml(System.String)">
            <summary>
            Removes html tags from a given strnig
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Strip(System.String)">
            <summary>
            Removes extra spaces within a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Proper(System.String)">
            <summary>
            Fixes a paragraph so that it more properly conforms to english rules (single space after punctuation,
            capitalization and so on).
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse the order of a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Applies formatting to the specified string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Capitalize(System.String)">
            <summary>
            Capitalizes the first letter of a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the right portion of the string for the specified length
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the left portion of the string for the specified length
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.RightOf(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns the substring of a string starting after the first match of the specified string.
            Parameters specify the starting search position and the type of search to be used for the string.
            (Added 2009-03-11 by Jacco)
            </summary>
            <param name="source"></param>
            <param name="value">The System.String to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="comparisonType">The search type to use.</param>
            <returns>A System.String</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.RightOf(System.String,System.String,System.Int32)">
            <summary>
            Returns the substring of a string starting after the first match of the specified string.
            Parameters specify the starting search position.
            (Added 2009-03-11 by Jacco)
            </summary>
            <param name="source"></param>
            <param name="value">The System.String to seek.</param>
            <param name="startIndex">The search type to use.</param>
            <returns>A System.String</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.RightOf(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the substring of a string starting after the first match of the specified string.
            Parameters specify the type of search to be used for the string.
            (Added 2009-03-11 by Jacco)
            </summary>
            <param name="source"></param>
            <param name="value">The System.String to seek.</param>
            <param name="comparisonType">The search type to use.</param>
            <returns>A System.String</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.RightOf(System.String,System.String)">
            <summary>
            Returns the substring of a string starting after the first match of the specified string.
            (Added 2009-03-11 by Jacco)
            </summary>
            <param name="source"></param>
            <param name="value">The System.String to seek.</param>
            <returns>A System.String</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            new
            </summary>
            <param name="source"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.DirectoryInfoExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Copies all files from one directory to another.
            <remarks>
            Contributed by Christian Liensberger, 
            http://www.liensberger.it/
            </remarks>
            </summary>
        </member>
        <member name="T:CodeBetter.Extensions.TimeExtensions">
            <remarks>
            These extensions were created by Fredrik Kalseth, 
            http://iridescence.no/
            
            For details about these extensions, visit
            http://iridescence.no/Posts/A-Set-of-Useful-Extension-Methods-for-DateTime.aspx
            </remarks>   
        </member>
        <member name="M:CodeBetter.Extensions.TimeExtensions.Midnight(System.DateTime)">
            <summary>
            Gets a DateTime representing midnight on the current date
            </summary>
            <param name="current">The current date</param>
        </member>
        <member name="M:CodeBetter.Extensions.TimeExtensions.Noon(System.DateTime)">
            <summary>
            Gets a DateTime representing noon on the current date
            </summary>
            <param name="current">The current date</param>
        </member>
        <member name="M:CodeBetter.Extensions.TimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Sets the time of the current date with minute precision
            </summary>
            <param name="current">The current date</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
        </member>
        <member name="M:CodeBetter.Extensions.TimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of the current date with second precision
            </summary>
            <param name="current">The current date</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.TimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of the current date with millisecond precision
            </summary>
            <param name="current">The current date</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <param name="millisecond">The millisecond</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.ToDictionary(System.Object)">
            <summary>
            Takes an object and turns it into a dictionary. Each public property is
            added to the dictionary, with the name of the property being the dictionary key,
            and its value being the dictionary value.      
            </summary>
            <remarks>
            Particularly useful for dealing with anonymous type decleration passed as objects
            to a method.
            </remarks>      
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.In(System.Object,System.Collections.IEnumerable)">
            <summary>
            Determines if the object is in the specific list.
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.DefinesAttribute(System.Object,System.String)">
            <summary>
            Returns true if the object is marked with the specified attribute
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.DefinesAttribute(System.Object,System.Type)">
            <summary>
            Returns true if the object is marked with the specified attribute
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.IsNull(System.Object)">
            <summary>
            new
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.IsNotNull(System.Object)">
            <summary>
            new should we add this? !IsNull is almost just as readable
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.IsEmpty``1(``0)">
            <summary>
            new
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.ObjectExtensions.IsNotEmpty``1(``0)">
            <summary>
            new
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CodeBetter.Extensions.ICommand">
            <summary>
            Use this interface for common ICommand tasks
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.StreamExtensions.ReadLines(System.IO.Stream)">
            <summary>
            Reads a stream line by line
            </summary>            
            <returns>The read lines</returns>
        </member>
        <member name="M:CodeBetter.Extensions.StreamExtensions.StreamLines(System.IO.Stream)">
            <summary>
            Enumerate a stream over all lines in it
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.StreamExtensions.ReadAll(System.IO.Stream)">
            <summary>
            Reads a complete stream
            </summary>            
            <returns>The contents of the stream</returns>
        </member>
        <member name="M:CodeBetter.Extensions.ResourceStrings.InitResourceManager">
            <summary>
            To be able to reuse error messages from mscorlib a ResourceManager singleton is instatiated
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.NameValueCollectionExtension.GetDouble(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets a double from the specified key
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.NameValueCollectionExtension.GetFloat(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets a float from the specified key
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.NameValueCollectionExtension.GetInt(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets an int from the specified key
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.NameValueCollectionExtension.GetBoolean(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets a boolean from the specified key
            </summary>
        </member>
        <member name="M:CodeBetter.Extensions.HttpRequestExtensions.ClientAddress(System.Web.HttpRequest)">
            <summary>
            Returns the client's real IP address, taking into accout some proxying and clusters
            </summary>
            <remarks>
            Many proxies don't expose the real client's IP address. In such cases, the proxies 
            IP address will be returned
            </remarks>
            <returns>The best guess at a client's IP address, or an empty string</returns>
        </member>
        <member name="M:CodeBetter.Extensions.IntExtensions.Suffix(System.Int32)">
            <summary>
            Returns the suffic (st, nd, rd, th) for the specified number
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IntExtensions.Suffixed(System.Int32)">
            <summary>
            Returns the suffix for the specified number appended to the number
            (1st, 12th, 33rd, 2nd)
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Performs the specified action a given number of times
            3.times(i => sum += i);
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IntExtensions.UpTo(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Performs the speficied action from start to end
            3.UpTo(5, i => sum += i)
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.IntExtensions.IsPrime``1(System.Int32)">
            <summary>
            
            </summary>
            <param name="ToBeChecked"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringParsersExtensions.ExtractInt(System.String)">
            <summary>
            Attempts to extract an integer from a string. This function behaves similarly
            to atoi functions, which will read up to a non-numeric value. For example:
            103abc --> 103   or -1!  -> -1 
            </summary>
            <remarks>
            This will throw an exception on failure
            </remarks>      
        </member>
        <member name="M:CodeBetter.Extensions.StringParsersExtensions.TryExtractInt(System.String,System.Int32@)">
            <summary>
            Attempts to extract an integer from a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringParsersExtensions.ToInt(System.String)">
            <summary>
            Parses an integer from a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringParsersExtensions.ToBoolean(System.String)">
            <summary>
            Parses a boolean from a string (including "0" and "1")
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringParsersExtensions.ToDouble(System.String)">
            <summary>
            Parses a double from a string
            </summary>      
        </member>
        <member name="M:CodeBetter.Extensions.StringParsersExtensions.ToFloat(System.String)">
            <summary>
            Parses a float from a string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.StringParsersExtensions.ToDecimal(System.String)">
            <summary>
            Parses a decimal from a string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="T:CodeBetter.Extensions.DayExtensions">
            <remarks>
            These extensions were created by Fredrik Kalseth, 
            http://iridescence.no/
            
            For details about these extensions, visit
            http://iridescence.no/Posts/A-Set-of-Useful-Extension-Methods-for-DateTime.aspx
            </remarks>   
        </member>
        <member name="M:CodeBetter.Extensions.DayExtensions.First(System.DateTime)">
            <summary>
            Gets a DateTime representing the first day in the current month
            </summary>
            <param name="current">The current date</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.DayExtensions.First(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the first specified day in the current month
            </summary>
            <param name="current">The current day</param>
            <param name="dayOfWeek">The current day of week</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.DayExtensions.Last(System.DateTime)">
            <summary>
            Gets a DateTime representing the last day in the current month
            </summary>
            <param name="current">The current date</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.DayExtensions.Last(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the last specified day in the current month
            </summary>
            <param name="current">The current date</param>
            <param name="dayOfWeek">The current day of week</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.DayExtensions.Next(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the first date following the current date which falls on the given day of the week
            </summary>
            <param name="current">The current date</param>
            <param name="dayOfWeek">The day of week for the next date to get</param>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes out a start tag with the specified local name and returns a StartElementWatcher object of which the sole
            purpose it to write out the end tag when disposed.
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <param name="localName">The local name of the element.</param>
            <returns>StartElementWatcher which when disposed calls WriteEndElement on the XmlWriter.</returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartElement(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes out the specified start tag and associates it with the given namespace.
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element. If this namespace is already in 
            scope and has an associated prefix, the writer writes that prefix also.</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartElement(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            Writes out the specified start tag and associates it with the given namespace and prefix.
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <param name="prefix">The namespace prefix for the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element.</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartElement(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <param name="localName">The local name of the element.</param>
            <param name="useWriteFullEndElement"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartElement(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns"></param>
            <param name="useWriteFullEndElement"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartElement(System.Xml.XmlWriter,System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <param name="prefix"></param>
            <param name="localName">The local name of the element.</param>
            <param name="ns"></param>
            <param name="useWriteFullEndElement"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartDocument(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <param name="standalone">If true, it writes "standalone=yes", if false, it writes "standalone=no"</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartDocument(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer">The XmlWriter this extension method is going to be called on.</param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartAttribute(System.Xml.XmlWriter,System.String)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="localName"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartAttribute(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="localName"></param>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="M:CodeBetter.Extensions.XmlWriterExtensions.StartAttribute(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
            <returns></returns>
        </member>
    </members>
</doc>
